/*
 * generated by Xtext 2.21.0
 */
grammar InternalElErrorCosmicoDePaserj;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package edu.upb.lp.isc.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.upb.lp.isc.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import edu.upb.lp.isc.services.ElErrorCosmicoDePaserjGrammarAccess;

}
@parser::members {
	private ElErrorCosmicoDePaserjGrammarAccess grammarAccess;

	public void setGrammarAccess(ElErrorCosmicoDePaserjGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMyRacketProgram
entryRuleMyRacketProgram
:
{ before(grammarAccess.getMyRacketProgramRule()); }
	 ruleMyRacketProgram
{ after(grammarAccess.getMyRacketProgramRule()); } 
	 EOF 
;

// Rule MyRacketProgram
ruleMyRacketProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getGroup()); }
		(rule__MyRacketProgram__Group__0)
		{ after(grammarAccess.getMyRacketProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefine
entryRuleDefine
:
{ before(grammarAccess.getDefineRule()); }
	 ruleDefine
{ after(grammarAccess.getDefineRule()); } 
	 EOF 
;

// Rule Define
ruleDefine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefineAccess().getGroup()); }
		(rule__Define__Group__0)
		{ after(grammarAccess.getDefineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression
:
{ before(grammarAccess.getSimpleExpressionRule()); }
	 ruleSimpleExpression
{ after(grammarAccess.getSimpleExpressionRule()); } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleExpressionAccess().getIntExpressionParserRuleCall()); }
		ruleIntExpression
		{ after(grammarAccess.getSimpleExpressionAccess().getIntExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntExpression
entryRuleIntExpression
:
{ before(grammarAccess.getIntExpressionRule()); }
	 ruleIntExpression
{ after(grammarAccess.getIntExpressionRule()); } 
	 EOF 
;

// Rule IntExpression
ruleIntExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntExpressionAccess().getValueAssignment()); }
		(rule__IntExpression__ValueAssignment)
		{ after(grammarAccess.getIntExpressionAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithExpression
entryRuleArithExpression
:
{ before(grammarAccess.getArithExpressionRule()); }
	 ruleArithExpression
{ after(grammarAccess.getArithExpressionRule()); } 
	 EOF 
;

// Rule ArithExpression
ruleArithExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithExpressionAccess().getGroup()); }
		(rule__ArithExpression__Group__0)
		{ after(grammarAccess.getArithExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfExpression
entryRuleIfExpression
:
{ before(grammarAccess.getIfExpressionRule()); }
	 ruleIfExpression
{ after(grammarAccess.getIfExpressionRule()); } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfExpressionAccess().getGroup()); }
		(rule__IfExpression__Group__0)
		{ after(grammarAccess.getIfExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCallExpression
entryRuleFunctionCallExpression
:
{ before(grammarAccess.getFunctionCallExpressionRule()); }
	 ruleFunctionCallExpression
{ after(grammarAccess.getFunctionCallExpressionRule()); } 
	 EOF 
;

// Rule FunctionCallExpression
ruleFunctionCallExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallExpressionAccess().getGroup()); }
		(rule__FunctionCallExpression__Group__0)
		{ after(grammarAccess.getFunctionCallExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringExpression
entryRuleStringExpression
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringExpressionAccess().getStAssignment()); }
		(rule__StringExpression__StAssignment)
		{ after(grammarAccess.getStringExpressionAccess().getStAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParamsExpression
entryRuleParamsExpression
:
{ before(grammarAccess.getParamsExpressionRule()); }
	 ruleParamsExpression
{ after(grammarAccess.getParamsExpressionRule()); } 
	 EOF 
;

// Rule ParamsExpression
ruleParamsExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamsExpressionAccess().getNameAssignment()); }
		(rule__ParamsExpression__NameAssignment)
		{ after(grammarAccess.getParamsExpressionAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParamsCallExpression
entryRuleParamsCallExpression
:
{ before(grammarAccess.getParamsCallExpressionRule()); }
	 ruleParamsCallExpression
{ after(grammarAccess.getParamsCallExpressionRule()); } 
	 EOF 
;

// Rule ParamsCallExpression
ruleParamsCallExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamsCallExpressionAccess().getFunctionAssignment()); }
		(rule__ParamsCallExpression__FunctionAssignment)
		{ after(grammarAccess.getParamsCallExpressionAccess().getFunctionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
		(rule__BooleanExpression__Alternatives)
		{ after(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanConstant
entryRuleBooleanConstant
:
{ before(grammarAccess.getBooleanConstantRule()); }
	 ruleBooleanConstant
{ after(grammarAccess.getBooleanConstantRule()); } 
	 EOF 
;

// Rule BooleanConstant
ruleBooleanConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanConstantAccess().getAlternatives()); }
		(rule__BooleanConstant__Alternatives)
		{ after(grammarAccess.getBooleanConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanOpExpression
entryRuleBooleanOpExpression
:
{ before(grammarAccess.getBooleanOpExpressionRule()); }
	 ruleBooleanOpExpression
{ after(grammarAccess.getBooleanOpExpressionRule()); } 
	 EOF 
;

// Rule BooleanOpExpression
ruleBooleanOpExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanOpExpressionAccess().getGroup()); }
		(rule__BooleanOpExpression__Group__0)
		{ after(grammarAccess.getBooleanOpExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
		(rule__ComparisonExpression__Group__0)
		{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringEqualsExpression
entryRuleStringEqualsExpression
:
{ before(grammarAccess.getStringEqualsExpressionRule()); }
	 ruleStringEqualsExpression
{ after(grammarAccess.getStringEqualsExpressionRule()); } 
	 EOF 
;

// Rule StringEqualsExpression
ruleStringEqualsExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringEqualsExpressionAccess().getGroup()); }
		(rule__StringEqualsExpression__Group__0)
		{ after(grammarAccess.getStringEqualsExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListIsEmptyExpression
entryRuleListIsEmptyExpression
:
{ before(grammarAccess.getListIsEmptyExpressionRule()); }
	 ruleListIsEmptyExpression
{ after(grammarAccess.getListIsEmptyExpressionRule()); } 
	 EOF 
;

// Rule ListIsEmptyExpression
ruleListIsEmptyExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListIsEmptyExpressionAccess().getGroup()); }
		(rule__ListIsEmptyExpression__Group__0)
		{ after(grammarAccess.getListIsEmptyExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListExpression
entryRuleListExpression
:
{ before(grammarAccess.getListExpressionRule()); }
	 ruleListExpression
{ after(grammarAccess.getListExpressionRule()); } 
	 EOF 
;

// Rule ListExpression
ruleListExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListExpressionAccess().getSimpleAssignment()); }
		(rule__ListExpression__SimpleAssignment)
		{ after(grammarAccess.getListExpressionAccess().getSimpleAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleList
entryRuleSimpleList
:
{ before(grammarAccess.getSimpleListRule()); }
	 ruleSimpleList
{ after(grammarAccess.getSimpleListRule()); } 
	 EOF 
;

// Rule SimpleList
ruleSimpleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleListAccess().getGroup()); }
		(rule__SimpleList__Group__0)
		{ after(grammarAccess.getSimpleListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLinkedList
entryRuleLinkedList
:
{ before(grammarAccess.getLinkedListRule()); }
	 ruleLinkedList
{ after(grammarAccess.getLinkedListRule()); } 
	 EOF 
;

// Rule LinkedList
ruleLinkedList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLinkedListAccess().getGroup()); }
		(rule__LinkedList__Group__0)
		{ after(grammarAccess.getLinkedListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListOperationExpression
entryRuleListOperationExpression
:
{ before(grammarAccess.getListOperationExpressionRule()); }
	 ruleListOperationExpression
{ after(grammarAccess.getListOperationExpressionRule()); } 
	 EOF 
;

// Rule ListOperationExpression
ruleListOperationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListOperationExpressionAccess().getAlternatives()); }
		(rule__ListOperationExpression__Alternatives)
		{ after(grammarAccess.getListOperationExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListHeadOp
entryRuleListHeadOp
:
{ before(grammarAccess.getListHeadOpRule()); }
	 ruleListHeadOp
{ after(grammarAccess.getListHeadOpRule()); } 
	 EOF 
;

// Rule ListHeadOp
ruleListHeadOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListHeadOpAccess().getGroup()); }
		(rule__ListHeadOp__Group__0)
		{ after(grammarAccess.getListHeadOpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListTailOp
entryRuleListTailOp
:
{ before(grammarAccess.getListTailOpRule()); }
	 ruleListTailOp
{ after(grammarAccess.getListTailOpRule()); } 
	 EOF 
;

// Rule ListTailOp
ruleListTailOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListTailOpAccess().getGroup()); }
		(rule__ListTailOp__Group__0)
		{ after(grammarAccess.getListTailOpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListConsOp
entryRuleListConsOp
:
{ before(grammarAccess.getListConsOpRule()); }
	 ruleListConsOp
{ after(grammarAccess.getListConsOpRule()); } 
	 EOF 
;

// Rule ListConsOp
ruleListConsOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListConsOpAccess().getGroup()); }
		(rule__ListConsOp__Group__0)
		{ after(grammarAccess.getListConsOpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListLengthOp
entryRuleListLengthOp
:
{ before(grammarAccess.getListLengthOpRule()); }
	 ruleListLengthOp
{ after(grammarAccess.getListLengthOpRule()); } 
	 EOF 
;

// Rule ListLengthOp
ruleListLengthOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListLengthOpAccess().getGroup()); }
		(rule__ListLengthOp__Group__0)
		{ after(grammarAccess.getListLengthOpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getParamsCallExpressionParserRuleCall_0()); }
		ruleParamsCallExpression
		{ after(grammarAccess.getExpressionAccess().getParamsCallExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_1()); }
		ruleSimpleExpression
		{ after(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getArithExpressionParserRuleCall_2()); }
		ruleArithExpression
		{ after(grammarAccess.getExpressionAccess().getArithExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getIfExpressionParserRuleCall_3()); }
		ruleIfExpression
		{ after(grammarAccess.getExpressionAccess().getIfExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getFunctionCallExpressionParserRuleCall_4()); }
		ruleFunctionCallExpression
		{ after(grammarAccess.getExpressionAccess().getFunctionCallExpressionParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_5()); }
		ruleStringExpression
		{ after(grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_6()); }
		ruleBooleanExpression
		{ after(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getListExpressionParserRuleCall_7()); }
		ruleListExpression
		{ after(grammarAccess.getExpressionAccess().getListExpressionParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getListOperationExpressionParserRuleCall_8()); }
		ruleListOperationExpression
		{ after(grammarAccess.getExpressionAccess().getListOperationExpressionParserRuleCall_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__OpAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpPlusSignKeyword_1_0_0()); }
		'+'
		{ after(grammarAccess.getArithExpressionAccess().getOpPlusSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpHyphenMinusKeyword_1_0_1()); }
		'-'
		{ after(grammarAccess.getArithExpressionAccess().getOpHyphenMinusKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpAsteriskKeyword_1_0_2()); }
		'*'
		{ after(grammarAccess.getArithExpressionAccess().getOpAsteriskKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpSolidusKeyword_1_0_3()); }
		'/'
		{ after(grammarAccess.getArithExpressionAccess().getOpSolidusKeyword_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getBooleanConstantParserRuleCall_0()); }
		ruleBooleanConstant
		{ after(grammarAccess.getBooleanExpressionAccess().getBooleanConstantParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getBooleanOpExpressionParserRuleCall_1()); }
		ruleBooleanOpExpression
		{ after(grammarAccess.getBooleanExpressionAccess().getBooleanOpExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getComparisonExpressionParserRuleCall_2()); }
		ruleComparisonExpression
		{ after(grammarAccess.getBooleanExpressionAccess().getComparisonExpressionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getStringEqualsExpressionParserRuleCall_3()); }
		ruleStringEqualsExpression
		{ after(grammarAccess.getBooleanExpressionAccess().getStringEqualsExpressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getListIsEmptyExpressionParserRuleCall_4()); }
		ruleListIsEmptyExpression
		{ after(grammarAccess.getBooleanExpressionAccess().getListIsEmptyExpressionParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanConstantAccess().getBoolAssignment_0()); }
		(rule__BooleanConstant__BoolAssignment_0)
		{ after(grammarAccess.getBooleanConstantAccess().getBoolAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanConstantAccess().getGroup_1()); }
		(rule__BooleanConstant__Group_1__0)
		{ after(grammarAccess.getBooleanConstantAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__OpAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanOpExpressionAccess().getOpANDKeyword_1_0_0()); }
		'AND'
		{ after(grammarAccess.getBooleanOpExpressionAccess().getOpANDKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanOpExpressionAccess().getOpORKeyword_1_0_1()); }
		'OR'
		{ after(grammarAccess.getBooleanOpExpressionAccess().getOpORKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__EvaluatorAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getEvaluatorGreaterThanSignKeyword_1_0_0()); }
		'>'
		{ after(grammarAccess.getComparisonExpressionAccess().getEvaluatorGreaterThanSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getEvaluatorLessThanSignKeyword_1_0_1()); }
		'<'
		{ after(grammarAccess.getComparisonExpressionAccess().getEvaluatorLessThanSignKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getEvaluatorEqualKeyword_1_0_2()); }
		'equal'
		{ after(grammarAccess.getComparisonExpressionAccess().getEvaluatorEqualKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getEvaluatorGreaterThanSignEqualsSignKeyword_1_0_3()); }
		'>='
		{ after(grammarAccess.getComparisonExpressionAccess().getEvaluatorGreaterThanSignEqualsSignKeyword_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getEvaluatorLessThanSignEqualsSignKeyword_1_0_4()); }
		'<='
		{ after(grammarAccess.getComparisonExpressionAccess().getEvaluatorLessThanSignEqualsSignKeyword_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListOperationExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListOperationExpressionAccess().getListHeadOpParserRuleCall_0()); }
		ruleListHeadOp
		{ after(grammarAccess.getListOperationExpressionAccess().getListHeadOpParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getListOperationExpressionAccess().getListTailOpParserRuleCall_1()); }
		ruleListTailOp
		{ after(grammarAccess.getListOperationExpressionAccess().getListTailOpParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getListOperationExpressionAccess().getListConsOpParserRuleCall_2()); }
		ruleListConsOp
		{ after(grammarAccess.getListOperationExpressionAccess().getListConsOpParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getListOperationExpressionAccess().getListLengthOpParserRuleCall_3()); }
		ruleListLengthOp
		{ after(grammarAccess.getListOperationExpressionAccess().getListLengthOpParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group__0__Impl
	rule__MyRacketProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyRacketProgramAccess().getGroup_0()); }
	(rule__MyRacketProgram__Group_0__0)?
	{ after(grammarAccess.getMyRacketProgramAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group__1__Impl
	rule__MyRacketProgram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsKeyword_1()); }
	'Executions:'
	{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_2()); }
		(rule__MyRacketProgram__ExecutionsAssignment_2)
		{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_2()); }
		(rule__MyRacketProgram__ExecutionsAssignment_2)*
		{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MyRacketProgram__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group_0__0__Impl
	rule__MyRacketProgram__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyRacketProgramAccess().getDefinitionsKeyword_0_0()); }
	'Definitions:'
	{ after(grammarAccess.getMyRacketProgramAccess().getDefinitionsKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_1()); }
		(rule__MyRacketProgram__DefinesAssignment_0_1)
		{ after(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_1()); }
	)
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_1()); }
		(rule__MyRacketProgram__DefinesAssignment_0_1)*
		{ after(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__0__Impl
	rule__Define__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__1__Impl
	rule__Define__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getDefineKeyword_1()); }
	'define'
	{ after(grammarAccess.getDefineAccess().getDefineKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__2__Impl
	rule__Define__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__3__Impl
	rule__Define__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getNameAssignment_3()); }
	(rule__Define__NameAssignment_3)
	{ after(grammarAccess.getDefineAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__4__Impl
	rule__Define__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getParamsAssignment_4()); }
	(rule__Define__ParamsAssignment_4)*
	{ after(grammarAccess.getDefineAccess().getParamsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__5__Impl
	rule__Define__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getDefineAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__6__Impl
	rule__Define__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getBodyAssignment_6()); }
	(rule__Define__BodyAssignment_6)
	{ after(grammarAccess.getDefineAccess().getBodyAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getDefineAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__0__Impl
	rule__ArithExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getArithExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__1__Impl
	rule__ArithExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getOpAssignment_1()); }
	(rule__ArithExpression__OpAssignment_1)
	{ after(grammarAccess.getArithExpressionAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__2__Impl
	rule__ArithExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getArgsAssignment_2()); }
	(rule__ArithExpression__ArgsAssignment_2)
	{ after(grammarAccess.getArithExpressionAccess().getArgsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__3__Impl
	rule__ArithExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getArithExpressionAccess().getArgsAssignment_3()); }
		(rule__ArithExpression__ArgsAssignment_3)
		{ after(grammarAccess.getArithExpressionAccess().getArgsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getArithExpressionAccess().getArgsAssignment_3()); }
		(rule__ArithExpression__ArgsAssignment_3)*
		{ after(grammarAccess.getArithExpressionAccess().getArgsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArithExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArithExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getArithExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__0__Impl
	rule__IfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__1__Impl
	rule__IfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getIfExpressionAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__2__Impl
	rule__IfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getCondAssignment_2()); }
	(rule__IfExpression__CondAssignment_2)
	{ after(grammarAccess.getIfExpressionAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__3__Impl
	rule__IfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getThenAssignment_3()); }
	(rule__IfExpression__ThenAssignment_3)
	{ after(grammarAccess.getIfExpressionAccess().getThenAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__4__Impl
	rule__IfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getSinoAssignment_4()); }
	(rule__IfExpression__SinoAssignment_4)
	{ after(grammarAccess.getIfExpressionAccess().getSinoAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCallExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallExpression__Group__0__Impl
	rule__FunctionCallExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getFunctionCallExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallExpression__Group__1__Impl
	rule__FunctionCallExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallExpressionAccess().getFunctionAssignment_1()); }
	(rule__FunctionCallExpression__FunctionAssignment_1)
	{ after(grammarAccess.getFunctionCallExpressionAccess().getFunctionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallExpression__Group__2__Impl
	rule__FunctionCallExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallExpressionAccess().getArgsAssignment_2()); }
	(rule__FunctionCallExpression__ArgsAssignment_2)*
	{ after(grammarAccess.getFunctionCallExpressionAccess().getArgsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCallExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFunctionCallExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanConstant__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanConstant__Group_1__0__Impl
	rule__BooleanConstant__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstant__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_1_0()); }
	()
	{ after(grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstant__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanConstant__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstant__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanConstantAccess().getFalseKeyword_1_1()); }
	'false'
	{ after(grammarAccess.getBooleanConstantAccess().getFalseKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanOpExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanOpExpression__Group__0__Impl
	rule__BooleanOpExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanOpExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getBooleanOpExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanOpExpression__Group__1__Impl
	rule__BooleanOpExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanOpExpressionAccess().getOpAssignment_1()); }
	(rule__BooleanOpExpression__OpAssignment_1)
	{ after(grammarAccess.getBooleanOpExpressionAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanOpExpression__Group__2__Impl
	rule__BooleanOpExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanOpExpressionAccess().getArgsAssignment_2()); }
	(rule__BooleanOpExpression__ArgsAssignment_2)
	{ after(grammarAccess.getBooleanOpExpressionAccess().getArgsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanOpExpression__Group__3__Impl
	rule__BooleanOpExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBooleanOpExpressionAccess().getArgsAssignment_3()); }
		(rule__BooleanOpExpression__ArgsAssignment_3)
		{ after(grammarAccess.getBooleanOpExpressionAccess().getArgsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getBooleanOpExpressionAccess().getArgsAssignment_3()); }
		(rule__BooleanOpExpression__ArgsAssignment_3)*
		{ after(grammarAccess.getBooleanOpExpressionAccess().getArgsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanOpExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanOpExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getBooleanOpExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getComparisonExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__1__Impl
	rule__ComparisonExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getEvaluatorAssignment_1()); }
	(rule__ComparisonExpression__EvaluatorAssignment_1)
	{ after(grammarAccess.getComparisonExpressionAccess().getEvaluatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__2__Impl
	rule__ComparisonExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getArgsAssignment_2()); }
	(rule__ComparisonExpression__ArgsAssignment_2)
	{ after(grammarAccess.getComparisonExpressionAccess().getArgsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__3__Impl
	rule__ComparisonExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getArgsAssignment_3()); }
		(rule__ComparisonExpression__ArgsAssignment_3)
		{ after(grammarAccess.getComparisonExpressionAccess().getArgsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getArgsAssignment_3()); }
		(rule__ComparisonExpression__ArgsAssignment_3)*
		{ after(grammarAccess.getComparisonExpressionAccess().getArgsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComparisonExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getComparisonExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringEqualsExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringEqualsExpression__Group__0__Impl
	rule__StringEqualsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringEqualsExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getStringEqualsExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringEqualsExpression__Group__1__Impl
	rule__StringEqualsExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringEqualsExpressionAccess().getOpAssignment_1()); }
	(rule__StringEqualsExpression__OpAssignment_1)
	{ after(grammarAccess.getStringEqualsExpressionAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringEqualsExpression__Group__2__Impl
	rule__StringEqualsExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringEqualsExpressionAccess().getArgsAssignment_2()); }
	(rule__StringEqualsExpression__ArgsAssignment_2)
	{ after(grammarAccess.getStringEqualsExpressionAccess().getArgsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringEqualsExpression__Group__3__Impl
	rule__StringEqualsExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringEqualsExpressionAccess().getArgsAssignment_3()); }
	(rule__StringEqualsExpression__ArgsAssignment_3)
	{ after(grammarAccess.getStringEqualsExpressionAccess().getArgsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringEqualsExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringEqualsExpressionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getStringEqualsExpressionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListIsEmptyExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListIsEmptyExpression__Group__0__Impl
	rule__ListIsEmptyExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListIsEmptyExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListIsEmptyExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getListIsEmptyExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListIsEmptyExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListIsEmptyExpression__Group__1__Impl
	rule__ListIsEmptyExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListIsEmptyExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListIsEmptyExpressionAccess().getEmptyKeyword_1()); }
	'empty?'
	{ after(grammarAccess.getListIsEmptyExpressionAccess().getEmptyKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListIsEmptyExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListIsEmptyExpression__Group__2__Impl
	rule__ListIsEmptyExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListIsEmptyExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListIsEmptyExpressionAccess().getListAssignment_2()); }
	(rule__ListIsEmptyExpression__ListAssignment_2)
	{ after(grammarAccess.getListIsEmptyExpressionAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListIsEmptyExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListIsEmptyExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListIsEmptyExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListIsEmptyExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getListIsEmptyExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group__0__Impl
	rule__SimpleList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getSimpleListAction_0()); }
	()
	{ after(grammarAccess.getSimpleListAccess().getSimpleListAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group__1__Impl
	rule__SimpleList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getDollarSignLeftParenthesisKeyword_1()); }
	'$('
	{ after(grammarAccess.getSimpleListAccess().getDollarSignLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group__2__Impl
	rule__SimpleList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getLinkedAssignment_2()); }
	(rule__SimpleList__LinkedAssignment_2)?
	{ after(grammarAccess.getSimpleListAccess().getLinkedAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleListAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getSimpleListAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LinkedList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LinkedList__Group__0__Impl
	rule__LinkedList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkedList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkedListAccess().getHeadAssignment_0()); }
	(rule__LinkedList__HeadAssignment_0)
	{ after(grammarAccess.getLinkedListAccess().getHeadAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkedList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LinkedList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkedList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkedListAccess().getTailAssignment_1()); }
	(rule__LinkedList__TailAssignment_1)*
	{ after(grammarAccess.getLinkedListAccess().getTailAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListHeadOp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListHeadOp__Group__0__Impl
	rule__ListHeadOp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListHeadOp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListHeadOpAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getListHeadOpAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListHeadOp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListHeadOp__Group__1__Impl
	rule__ListHeadOp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListHeadOp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListHeadOpAccess().getCarKeyword_1()); }
	'car'
	{ after(grammarAccess.getListHeadOpAccess().getCarKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListHeadOp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListHeadOp__Group__2__Impl
	rule__ListHeadOp__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListHeadOp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListHeadOpAccess().getListAssignment_2()); }
	(rule__ListHeadOp__ListAssignment_2)
	{ after(grammarAccess.getListHeadOpAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListHeadOp__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListHeadOp__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListHeadOp__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListHeadOpAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getListHeadOpAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListTailOp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListTailOp__Group__0__Impl
	rule__ListTailOp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListTailOp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListTailOpAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getListTailOpAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListTailOp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListTailOp__Group__1__Impl
	rule__ListTailOp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListTailOp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListTailOpAccess().getCdrKeyword_1()); }
	'cdr'
	{ after(grammarAccess.getListTailOpAccess().getCdrKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListTailOp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListTailOp__Group__2__Impl
	rule__ListTailOp__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListTailOp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListTailOpAccess().getListAssignment_2()); }
	(rule__ListTailOp__ListAssignment_2)
	{ after(grammarAccess.getListTailOpAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListTailOp__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListTailOp__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListTailOp__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListTailOpAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getListTailOpAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListConsOp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListConsOp__Group__0__Impl
	rule__ListConsOp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListConsOp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListConsOpAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getListConsOpAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListConsOp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListConsOp__Group__1__Impl
	rule__ListConsOp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListConsOp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListConsOpAccess().getConsKeyword_1()); }
	'cons'
	{ after(grammarAccess.getListConsOpAccess().getConsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListConsOp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListConsOp__Group__2__Impl
	rule__ListConsOp__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListConsOp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListConsOpAccess().getElemAssignment_2()); }
	(rule__ListConsOp__ElemAssignment_2)
	{ after(grammarAccess.getListConsOpAccess().getElemAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListConsOp__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListConsOp__Group__3__Impl
	rule__ListConsOp__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ListConsOp__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListConsOpAccess().getListAssignment_3()); }
	(rule__ListConsOp__ListAssignment_3)
	{ after(grammarAccess.getListConsOpAccess().getListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListConsOp__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListConsOp__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListConsOp__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListConsOpAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getListConsOpAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListLengthOp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLengthOp__Group__0__Impl
	rule__ListLengthOp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLengthOp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLengthOpAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getListLengthOpAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLengthOp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLengthOp__Group__1__Impl
	rule__ListLengthOp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLengthOp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLengthOpAccess().getLengthKeyword_1()); }
	'length'
	{ after(grammarAccess.getListLengthOpAccess().getLengthKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLengthOp__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLengthOp__Group__2__Impl
	rule__ListLengthOp__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLengthOp__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLengthOpAccess().getListAssignment_2()); }
	(rule__ListLengthOp__ListAssignment_2)
	{ after(grammarAccess.getListLengthOpAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLengthOp__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListLengthOp__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLengthOp__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListLengthOpAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getListLengthOpAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MyRacketProgram__DefinesAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getDefinesDefineParserRuleCall_0_1_0()); }
		ruleDefine
		{ after(grammarAccess.getMyRacketProgramAccess().getDefinesDefineParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__ExecutionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__ParamsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineAccess().getParamsParamsExpressionParserRuleCall_4_0()); }
		ruleParamsExpression
		{ after(grammarAccess.getDefineAccess().getParamsParamsExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__BodyAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineAccess().getBodyExpressionParserRuleCall_6_0()); }
		ruleExpression
		{ after(grammarAccess.getDefineAccess().getBodyExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntExpression__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntExpressionAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntExpressionAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getOpAlternatives_1_0()); }
		(rule__ArithExpression__OpAlternatives_1_0)
		{ after(grammarAccess.getArithExpressionAccess().getOpAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__ArgsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getArgsExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getArithExpressionAccess().getArgsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithExpression__ArgsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithExpressionAccess().getArgsExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getArithExpressionAccess().getArgsExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getCondBooleanExpressionParserRuleCall_2_0()); }
		ruleBooleanExpression
		{ after(grammarAccess.getIfExpressionAccess().getCondBooleanExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ThenAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__SinoAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfExpressionAccess().getSinoExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getIfExpressionAccess().getSinoExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__FunctionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallExpressionAccess().getFunctionDefineCrossReference_1_0()); }
		(
			{ before(grammarAccess.getFunctionCallExpressionAccess().getFunctionDefineIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionCallExpressionAccess().getFunctionDefineIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getFunctionCallExpressionAccess().getFunctionDefineCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCallExpression__ArgsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallExpressionAccess().getArgsExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallExpressionAccess().getArgsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__StAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringExpressionAccess().getStSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringExpressionAccess().getStSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsExpression__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamsExpressionAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getParamsExpressionAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsCallExpression__FunctionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamsCallExpressionAccess().getFunctionParamsExpressionCrossReference_0()); }
		(
			{ before(grammarAccess.getParamsCallExpressionAccess().getFunctionParamsExpressionIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getParamsCallExpressionAccess().getFunctionParamsExpressionIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getParamsCallExpressionAccess().getFunctionParamsExpressionCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstant__BoolAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanConstantAccess().getBoolTrueKeyword_0_0()); }
		(
			{ before(grammarAccess.getBooleanConstantAccess().getBoolTrueKeyword_0_0()); }
			'true'
			{ after(grammarAccess.getBooleanConstantAccess().getBoolTrueKeyword_0_0()); }
		)
		{ after(grammarAccess.getBooleanConstantAccess().getBoolTrueKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanOpExpressionAccess().getOpAlternatives_1_0()); }
		(rule__BooleanOpExpression__OpAlternatives_1_0)
		{ after(grammarAccess.getBooleanOpExpressionAccess().getOpAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__ArgsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanOpExpressionAccess().getArgsBooleanExpressionParserRuleCall_2_0()); }
		ruleBooleanExpression
		{ after(grammarAccess.getBooleanOpExpressionAccess().getArgsBooleanExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOpExpression__ArgsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanOpExpressionAccess().getArgsBooleanExpressionParserRuleCall_3_0()); }
		ruleBooleanExpression
		{ after(grammarAccess.getBooleanOpExpressionAccess().getArgsBooleanExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__EvaluatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getEvaluatorAlternatives_1_0()); }
		(rule__ComparisonExpression__EvaluatorAlternatives_1_0)
		{ after(grammarAccess.getComparisonExpressionAccess().getEvaluatorAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__ArgsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getArgsIntExpressionParserRuleCall_2_0()); }
		ruleIntExpression
		{ after(grammarAccess.getComparisonExpressionAccess().getArgsIntExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__ArgsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonExpressionAccess().getArgsIntExpressionParserRuleCall_3_0()); }
		ruleIntExpression
		{ after(grammarAccess.getComparisonExpressionAccess().getArgsIntExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringEqualsExpressionAccess().getOpEqualKeyword_1_0()); }
		(
			{ before(grammarAccess.getStringEqualsExpressionAccess().getOpEqualKeyword_1_0()); }
			'equal?'
			{ after(grammarAccess.getStringEqualsExpressionAccess().getOpEqualKeyword_1_0()); }
		)
		{ after(grammarAccess.getStringEqualsExpressionAccess().getOpEqualKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__ArgsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringEqualsExpressionAccess().getArgsStringExpressionParserRuleCall_2_0()); }
		ruleStringExpression
		{ after(grammarAccess.getStringEqualsExpressionAccess().getArgsStringExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEqualsExpression__ArgsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringEqualsExpressionAccess().getArgsStringExpressionParserRuleCall_3_0()); }
		ruleStringExpression
		{ after(grammarAccess.getStringEqualsExpressionAccess().getArgsStringExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListIsEmptyExpression__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListIsEmptyExpressionAccess().getListLinkedListParserRuleCall_2_0()); }
		ruleLinkedList
		{ after(grammarAccess.getListIsEmptyExpressionAccess().getListLinkedListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListExpression__SimpleAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListExpressionAccess().getSimpleSimpleListParserRuleCall_0()); }
		ruleSimpleList
		{ after(grammarAccess.getListExpressionAccess().getSimpleSimpleListParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleList__LinkedAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleListAccess().getLinkedLinkedListParserRuleCall_2_0()); }
		ruleLinkedList
		{ after(grammarAccess.getSimpleListAccess().getLinkedLinkedListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkedList__HeadAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinkedListAccess().getHeadExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getLinkedListAccess().getHeadExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkedList__TailAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinkedListAccess().getTailExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getLinkedListAccess().getTailExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListHeadOp__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListHeadOpAccess().getListLinkedListParserRuleCall_2_0()); }
		ruleLinkedList
		{ after(grammarAccess.getListHeadOpAccess().getListLinkedListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListTailOp__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListTailOpAccess().getListLinkedListParserRuleCall_2_0()); }
		ruleLinkedList
		{ after(grammarAccess.getListTailOpAccess().getListLinkedListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListConsOp__ElemAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListConsOpAccess().getElemExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getListConsOpAccess().getElemExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListConsOp__ListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListConsOpAccess().getListLinkedListParserRuleCall_3_0()); }
		ruleLinkedList
		{ after(grammarAccess.getListConsOpAccess().getListLinkedListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLengthOp__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListLengthOpAccess().getListLinkedListParserRuleCall_2_0()); }
		ruleLinkedList
		{ after(grammarAccess.getListLengthOpAccess().getListLinkedListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
