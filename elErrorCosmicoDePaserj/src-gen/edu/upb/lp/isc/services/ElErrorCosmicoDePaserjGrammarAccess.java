/*
 * generated by Xtext 2.21.0
 */
package edu.upb.lp.isc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ElErrorCosmicoDePaserjGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MyRacketProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.MyRacketProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cDefinitionsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDefinesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDefinesDefineParserRuleCall_0_1_0 = (RuleCall)cDefinesAssignment_0_1.eContents().get(0);
		private final Keyword cExecutionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExecutionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExecutionsExpressionParserRuleCall_2_0 = (RuleCall)cExecutionsAssignment_2.eContents().get(0);
		
		//MyRacketProgram:
		//	("Definitions:"
		//	defines+=Define+)?
		//	"Executions:"
		//	executions+=Expression+;
		@Override public ParserRule getRule() { return rule; }
		
		//("Definitions:" defines+=Define+)? "Executions:" executions+=Expression+
		public Group getGroup() { return cGroup; }
		
		//("Definitions:" defines+=Define+)?
		public Group getGroup_0() { return cGroup_0; }
		
		//"Definitions:"
		public Keyword getDefinitionsKeyword_0_0() { return cDefinitionsKeyword_0_0; }
		
		//defines+=Define+
		public Assignment getDefinesAssignment_0_1() { return cDefinesAssignment_0_1; }
		
		//Define
		public RuleCall getDefinesDefineParserRuleCall_0_1_0() { return cDefinesDefineParserRuleCall_0_1_0; }
		
		//"Executions:"
		public Keyword getExecutionsKeyword_1() { return cExecutionsKeyword_1; }
		
		//executions+=Expression+
		public Assignment getExecutionsAssignment_2() { return cExecutionsAssignment_2; }
		
		//Expression
		public RuleCall getExecutionsExpressionParserRuleCall_2_0() { return cExecutionsExpressionParserRuleCall_2_0; }
	}
	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsParamsExpressionParserRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Define:
		//	"(" "define" "(" name=ID params+=ParamsExpression* ")" body=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "define" "(" name=ID params+=ParamsExpression* ")" body=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"define"
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//params+=ParamsExpression*
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }
		
		//ParamsExpression
		public RuleCall getParamsParamsExpressionParserRuleCall_4_0() { return cParamsParamsExpressionParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=Expression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//Expression
		public RuleCall getBodyExpressionParserRuleCall_6_0() { return cBodyExpressionParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParamsCallExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArithExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionCallExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBooleanExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cListExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cListOperationExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Expression:
		//	ParamsCallExpression
		//	| SimpleExpression
		//	| ArithExpression
		//	| IfExpression
		//	| FunctionCallExpression
		//	| StringExpression
		//	| BooleanExpression
		//	| ListExpression
		//	| ListOperationExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ParamsCallExpression | SimpleExpression | ArithExpression | IfExpression | FunctionCallExpression | StringExpression |
		//BooleanExpression | ListExpression | ListOperationExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParamsCallExpression
		public RuleCall getParamsCallExpressionParserRuleCall_0() { return cParamsCallExpressionParserRuleCall_0; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_1() { return cSimpleExpressionParserRuleCall_1; }
		
		//ArithExpression
		public RuleCall getArithExpressionParserRuleCall_2() { return cArithExpressionParserRuleCall_2; }
		
		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_3() { return cIfExpressionParserRuleCall_3; }
		
		//FunctionCallExpression
		public RuleCall getFunctionCallExpressionParserRuleCall_4() { return cFunctionCallExpressionParserRuleCall_4; }
		
		//StringExpression
		public RuleCall getStringExpressionParserRuleCall_5() { return cStringExpressionParserRuleCall_5; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_6() { return cBooleanExpressionParserRuleCall_6; }
		
		//ListExpression
		public RuleCall getListExpressionParserRuleCall_7() { return cListExpressionParserRuleCall_7; }
		
		//ListOperationExpression
		public RuleCall getListOperationExpressionParserRuleCall_8() { return cListOperationExpressionParserRuleCall_8; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.SimpleExpression");
		private final RuleCall cIntExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SimpleExpression:
		//	IntExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//IntExpression
		public RuleCall getIntExpressionParserRuleCall() { return cIntExpressionParserRuleCall; }
	}
	public class IntExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.IntExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntExpression:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ArithExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.ArithExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cOpAsteriskKeyword_1_0_2 = (Keyword)cOpAlternatives_1_0.eContents().get(2);
		private final Keyword cOpSolidusKeyword_1_0_3 = (Keyword)cOpAlternatives_1_0.eContents().get(3);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsExpressionParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsExpressionParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArithExpression:
		//	"(" op=("+" | "-" | "*" | "/") args+=Expression args+=Expression+ ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" op=("+" | "-" | "*" | "/") args+=Expression args+=Expression+ ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//op=("+" | "-" | "*" | "/")
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//("+" | "-" | "*" | "/")
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//"+"
		public Keyword getOpPlusSignKeyword_1_0_0() { return cOpPlusSignKeyword_1_0_0; }
		
		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_1() { return cOpHyphenMinusKeyword_1_0_1; }
		
		//"*"
		public Keyword getOpAsteriskKeyword_1_0_2() { return cOpAsteriskKeyword_1_0_2; }
		
		//"/"
		public Keyword getOpSolidusKeyword_1_0_3() { return cOpSolidusKeyword_1_0_3; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0() { return cArgsExpressionParserRuleCall_2_0; }
		
		//args+=Expression+
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_0() { return cArgsExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondBooleanExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Assignment cSinoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSinoExpressionParserRuleCall_4_0 = (RuleCall)cSinoAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfExpression:
		//	"(" "if" cond=BooleanExpression then=Expression sino=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "if" cond=BooleanExpression then=Expression sino=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//cond=BooleanExpression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//BooleanExpression
		public RuleCall getCondBooleanExpressionParserRuleCall_2_0() { return cCondBooleanExpressionParserRuleCall_2_0; }
		
		//then=Expression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_3_0() { return cThenExpressionParserRuleCall_3_0; }
		
		//sino=Expression
		public Assignment getSinoAssignment_4() { return cSinoAssignment_4; }
		
		//Expression
		public RuleCall getSinoExpressionParserRuleCall_4_0() { return cSinoExpressionParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class FunctionCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.FunctionCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionDefineCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionDefineIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionDefineCrossReference_1_0.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsExpressionParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////LINKING
		//FunctionCallExpression:
		//	"(" function=[Define] args+=Expression* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" function=[Define] args+=Expression* ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//function=[Define]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//[Define]
		public CrossReference getFunctionDefineCrossReference_1_0() { return cFunctionDefineCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionDefineIDTerminalRuleCall_1_0_1() { return cFunctionDefineIDTerminalRuleCall_1_0_1; }
		
		//args+=Expression*
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0() { return cArgsExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class StringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.StringExpression");
		private final Assignment cStAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStSTRINGTerminalRuleCall_0 = (RuleCall)cStAssignment.eContents().get(0);
		
		//StringExpression:
		//	st=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//st=STRING
		public Assignment getStAssignment() { return cStAssignment; }
		
		//STRING
		public RuleCall getStSTRINGTerminalRuleCall_0() { return cStSTRINGTerminalRuleCall_0; }
	}
	public class ParamsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.ParamsExpression");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ParamsExpression:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ParamsCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.ParamsCallExpression");
		private final Assignment cFunctionAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFunctionParamsExpressionCrossReference_0 = (CrossReference)cFunctionAssignment.eContents().get(0);
		private final RuleCall cFunctionParamsExpressionIDTerminalRuleCall_0_1 = (RuleCall)cFunctionParamsExpressionCrossReference_0.eContents().get(1);
		
		//ParamsCallExpression:
		//	function=[ParamsExpression];
		@Override public ParserRule getRule() { return rule; }
		
		//function=[ParamsExpression]
		public Assignment getFunctionAssignment() { return cFunctionAssignment; }
		
		//[ParamsExpression]
		public CrossReference getFunctionParamsExpressionCrossReference_0() { return cFunctionParamsExpressionCrossReference_0; }
		
		//ID
		public RuleCall getFunctionParamsExpressionIDTerminalRuleCall_0_1() { return cFunctionParamsExpressionIDTerminalRuleCall_0_1; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanOpExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringEqualsExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cListIsEmptyExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BooleanExpression:
		//	BooleanConstant | BooleanOpExpression | ComparisonExpression | StringEqualsExpression
		//	| ListIsEmptyExpression
		//	//|condicion = (LeftPart= Expression relacion=opBool RightPart= Expression)
		//	// condicion ej x>2
		//	//etc (un id)
		//	//cte boolean true o false
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanConstant | BooleanOpExpression | ComparisonExpression | StringEqualsExpression | ListIsEmptyExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanConstant
		public RuleCall getBooleanConstantParserRuleCall_0() { return cBooleanConstantParserRuleCall_0; }
		
		//BooleanOpExpression
		public RuleCall getBooleanOpExpressionParserRuleCall_1() { return cBooleanOpExpressionParserRuleCall_1; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_2() { return cComparisonExpressionParserRuleCall_2; }
		
		//StringEqualsExpression
		public RuleCall getStringEqualsExpressionParserRuleCall_3() { return cStringEqualsExpressionParserRuleCall_3; }
		
		//ListIsEmptyExpression
		public RuleCall getListIsEmptyExpressionParserRuleCall_4() { return cListIsEmptyExpressionParserRuleCall_4; }
	}
	public class BooleanConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.BooleanConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBoolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cBoolTrueKeyword_0_0 = (Keyword)cBoolAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//BooleanConstant:
		//	bool?='true' | {BooleanConstant} 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//bool?='true' | {BooleanConstant} 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bool?='true'
		public Assignment getBoolAssignment_0() { return cBoolAssignment_0; }
		
		//'true'
		public Keyword getBoolTrueKeyword_0_0() { return cBoolTrueKeyword_0_0; }
		
		//{BooleanConstant} 'false'
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanConstant}
		public Action getBooleanConstantAction_1_0() { return cBooleanConstantAction_1_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class BooleanOpExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.BooleanOpExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpANDKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpORKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsBooleanExpressionParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsBooleanExpressionParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BooleanOpExpression:
		//	"(" op=("AND" | "OR") args+=BooleanExpression args+=BooleanExpression+ ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" op=("AND" | "OR") args+=BooleanExpression args+=BooleanExpression+ ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//op=("AND" | "OR")
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//("AND" | "OR")
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//"AND"
		public Keyword getOpANDKeyword_1_0_0() { return cOpANDKeyword_1_0_0; }
		
		//"OR"
		public Keyword getOpORKeyword_1_0_1() { return cOpORKeyword_1_0_1; }
		
		//args+=BooleanExpression
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//BooleanExpression
		public RuleCall getArgsBooleanExpressionParserRuleCall_2_0() { return cArgsBooleanExpressionParserRuleCall_2_0; }
		
		//args+=BooleanExpression+
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//BooleanExpression
		public RuleCall getArgsBooleanExpressionParserRuleCall_3_0() { return cArgsBooleanExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEvaluatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cEvaluatorAlternatives_1_0 = (Alternatives)cEvaluatorAssignment_1.eContents().get(0);
		private final Keyword cEvaluatorGreaterThanSignKeyword_1_0_0 = (Keyword)cEvaluatorAlternatives_1_0.eContents().get(0);
		private final Keyword cEvaluatorLessThanSignKeyword_1_0_1 = (Keyword)cEvaluatorAlternatives_1_0.eContents().get(1);
		private final Keyword cEvaluatorEqualKeyword_1_0_2 = (Keyword)cEvaluatorAlternatives_1_0.eContents().get(2);
		private final Keyword cEvaluatorGreaterThanSignEqualsSignKeyword_1_0_3 = (Keyword)cEvaluatorAlternatives_1_0.eContents().get(3);
		private final Keyword cEvaluatorLessThanSignEqualsSignKeyword_1_0_4 = (Keyword)cEvaluatorAlternatives_1_0.eContents().get(4);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsIntExpressionParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsIntExpressionParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComparisonExpression:
		//	"(" evaluator=(">" | "<" | "equal" | ">=" | "<=") args+=IntExpression args+=IntExpression+ ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" evaluator=(">" | "<" | "equal" | ">=" | "<=") args+=IntExpression args+=IntExpression+ ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//evaluator=(">" | "<" | "equal" | ">=" | "<=")
		public Assignment getEvaluatorAssignment_1() { return cEvaluatorAssignment_1; }
		
		//(">" | "<" | "equal" | ">=" | "<=")
		public Alternatives getEvaluatorAlternatives_1_0() { return cEvaluatorAlternatives_1_0; }
		
		//">"
		public Keyword getEvaluatorGreaterThanSignKeyword_1_0_0() { return cEvaluatorGreaterThanSignKeyword_1_0_0; }
		
		//"<"
		public Keyword getEvaluatorLessThanSignKeyword_1_0_1() { return cEvaluatorLessThanSignKeyword_1_0_1; }
		
		//"equal"
		public Keyword getEvaluatorEqualKeyword_1_0_2() { return cEvaluatorEqualKeyword_1_0_2; }
		
		//">="
		public Keyword getEvaluatorGreaterThanSignEqualsSignKeyword_1_0_3() { return cEvaluatorGreaterThanSignEqualsSignKeyword_1_0_3; }
		
		//"<="
		public Keyword getEvaluatorLessThanSignEqualsSignKeyword_1_0_4() { return cEvaluatorLessThanSignEqualsSignKeyword_1_0_4; }
		
		//args+=IntExpression
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//IntExpression
		public RuleCall getArgsIntExpressionParserRuleCall_2_0() { return cArgsIntExpressionParserRuleCall_2_0; }
		
		//args+=IntExpression+
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//IntExpression
		public RuleCall getArgsIntExpressionParserRuleCall_3_0() { return cArgsIntExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StringEqualsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.StringEqualsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOpEqualKeyword_1_0 = (Keyword)cOpAssignment_1.eContents().get(0);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsStringExpressionParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsStringExpressionParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StringEqualsExpression:
		//	"(" op="equal?" args+=StringExpression args+=StringExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" op="equal?" args+=StringExpression args+=StringExpression ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//op="equal?"
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//"equal?"
		public Keyword getOpEqualKeyword_1_0() { return cOpEqualKeyword_1_0; }
		
		//args+=StringExpression
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//StringExpression
		public RuleCall getArgsStringExpressionParserRuleCall_2_0() { return cArgsStringExpressionParserRuleCall_2_0; }
		
		//args+=StringExpression
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//StringExpression
		public RuleCall getArgsStringExpressionParserRuleCall_3_0() { return cArgsStringExpressionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ListIsEmptyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.ListIsEmptyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEmptyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListLinkedListParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListIsEmptyExpression:
		//	"(" "empty?" list=LinkedList ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "empty?" list=LinkedList ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"empty?"
		public Keyword getEmptyKeyword_1() { return cEmptyKeyword_1; }
		
		//list=LinkedList
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//LinkedList
		public RuleCall getListLinkedListParserRuleCall_2_0() { return cListLinkedListParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ListExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.ListExpression");
		private final Assignment cSimpleAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSimpleSimpleListParserRuleCall_0 = (RuleCall)cSimpleAssignment.eContents().get(0);
		
		//ListExpression:
		//	simple=SimpleList;
		@Override public ParserRule getRule() { return rule; }
		
		//simple=SimpleList
		public Assignment getSimpleAssignment() { return cSimpleAssignment; }
		
		//SimpleList
		public RuleCall getSimpleSimpleListParserRuleCall_0() { return cSimpleSimpleListParserRuleCall_0; }
	}
	public class SimpleListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.SimpleList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDollarSignLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLinkedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinkedLinkedListParserRuleCall_2_0 = (RuleCall)cLinkedAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleList:
		//	{SimpleList} "$(" linked=LinkedList? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleList} "$(" linked=LinkedList? ")"
		public Group getGroup() { return cGroup; }
		
		//{SimpleList}
		public Action getSimpleListAction_0() { return cSimpleListAction_0; }
		
		//"$("
		public Keyword getDollarSignLeftParenthesisKeyword_1() { return cDollarSignLeftParenthesisKeyword_1; }
		
		//linked=LinkedList?
		public Assignment getLinkedAssignment_2() { return cLinkedAssignment_2; }
		
		//LinkedList
		public RuleCall getLinkedLinkedListParserRuleCall_2_0() { return cLinkedLinkedListParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LinkedListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.LinkedList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadExpressionParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cTailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTailExpressionParserRuleCall_1_0 = (RuleCall)cTailAssignment_1.eContents().get(0);
		
		//LinkedList:
		//	head=Expression tail+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//head=Expression tail+=Expression*
		public Group getGroup() { return cGroup; }
		
		//head=Expression
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }
		
		//Expression
		public RuleCall getHeadExpressionParserRuleCall_0_0() { return cHeadExpressionParserRuleCall_0_0; }
		
		//tail+=Expression*
		public Assignment getTailAssignment_1() { return cTailAssignment_1; }
		
		//Expression
		public RuleCall getTailExpressionParserRuleCall_1_0() { return cTailExpressionParserRuleCall_1_0; }
	}
	public class ListOperationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.ListOperationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cListHeadOpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListTailOpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListConsOpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cListLengthOpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ListOperationExpression:
		//	ListHeadOp | ListTailOp | ListConsOp | ListLengthOp;
		@Override public ParserRule getRule() { return rule; }
		
		//ListHeadOp | ListTailOp | ListConsOp | ListLengthOp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ListHeadOp
		public RuleCall getListHeadOpParserRuleCall_0() { return cListHeadOpParserRuleCall_0; }
		
		//ListTailOp
		public RuleCall getListTailOpParserRuleCall_1() { return cListTailOpParserRuleCall_1; }
		
		//ListConsOp
		public RuleCall getListConsOpParserRuleCall_2() { return cListConsOpParserRuleCall_2; }
		
		//ListLengthOp
		public RuleCall getListLengthOpParserRuleCall_3() { return cListLengthOpParserRuleCall_3; }
	}
	public class ListHeadOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.ListHeadOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListLinkedListParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListHeadOp:
		//	"(" "car" list=LinkedList ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "car" list=LinkedList ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"car"
		public Keyword getCarKeyword_1() { return cCarKeyword_1; }
		
		//list=LinkedList
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//LinkedList
		public RuleCall getListLinkedListParserRuleCall_2_0() { return cListLinkedListParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ListTailOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.ListTailOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCdrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListLinkedListParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListTailOp:
		//	"(" "cdr" list=LinkedList ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "cdr" list=LinkedList ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"cdr"
		public Keyword getCdrKeyword_1() { return cCdrKeyword_1; }
		
		//list=LinkedList
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//LinkedList
		public RuleCall getListLinkedListParserRuleCall_2_0() { return cListLinkedListParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ListConsOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.ListConsOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElemAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElemExpressionParserRuleCall_2_0 = (RuleCall)cElemAssignment_2.eContents().get(0);
		private final Assignment cListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListLinkedListParserRuleCall_3_0 = (RuleCall)cListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListConsOp:
		//	"(" "cons" elem=Expression list=LinkedList ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "cons" elem=Expression list=LinkedList ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"cons"
		public Keyword getConsKeyword_1() { return cConsKeyword_1; }
		
		//elem=Expression
		public Assignment getElemAssignment_2() { return cElemAssignment_2; }
		
		//Expression
		public RuleCall getElemExpressionParserRuleCall_2_0() { return cElemExpressionParserRuleCall_2_0; }
		
		//list=LinkedList
		public Assignment getListAssignment_3() { return cListAssignment_3; }
		
		//LinkedList
		public RuleCall getListLinkedListParserRuleCall_3_0() { return cListLinkedListParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ListLengthOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.ElErrorCosmicoDePaserj.ListLengthOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListLinkedListParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListLengthOp:
		//	"(" "length" list=LinkedList ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "length" list=LinkedList ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//"length"
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//list=LinkedList
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//LinkedList
		public RuleCall getListLinkedListParserRuleCall_2_0() { return cListLinkedListParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final MyRacketProgramElements pMyRacketProgram;
	private final DefineElements pDefine;
	private final ExpressionElements pExpression;
	private final SimpleExpressionElements pSimpleExpression;
	private final IntExpressionElements pIntExpression;
	private final ArithExpressionElements pArithExpression;
	private final IfExpressionElements pIfExpression;
	private final FunctionCallExpressionElements pFunctionCallExpression;
	private final StringExpressionElements pStringExpression;
	private final ParamsExpressionElements pParamsExpression;
	private final ParamsCallExpressionElements pParamsCallExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final BooleanConstantElements pBooleanConstant;
	private final BooleanOpExpressionElements pBooleanOpExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final StringEqualsExpressionElements pStringEqualsExpression;
	private final ListIsEmptyExpressionElements pListIsEmptyExpression;
	private final ListExpressionElements pListExpression;
	private final SimpleListElements pSimpleList;
	private final LinkedListElements pLinkedList;
	private final ListOperationExpressionElements pListOperationExpression;
	private final ListHeadOpElements pListHeadOp;
	private final ListTailOpElements pListTailOp;
	private final ListConsOpElements pListConsOp;
	private final ListLengthOpElements pListLengthOp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ElErrorCosmicoDePaserjGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMyRacketProgram = new MyRacketProgramElements();
		this.pDefine = new DefineElements();
		this.pExpression = new ExpressionElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pIntExpression = new IntExpressionElements();
		this.pArithExpression = new ArithExpressionElements();
		this.pIfExpression = new IfExpressionElements();
		this.pFunctionCallExpression = new FunctionCallExpressionElements();
		this.pStringExpression = new StringExpressionElements();
		this.pParamsExpression = new ParamsExpressionElements();
		this.pParamsCallExpression = new ParamsCallExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pBooleanConstant = new BooleanConstantElements();
		this.pBooleanOpExpression = new BooleanOpExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pStringEqualsExpression = new StringEqualsExpressionElements();
		this.pListIsEmptyExpression = new ListIsEmptyExpressionElements();
		this.pListExpression = new ListExpressionElements();
		this.pSimpleList = new SimpleListElements();
		this.pLinkedList = new LinkedListElements();
		this.pListOperationExpression = new ListOperationExpressionElements();
		this.pListHeadOp = new ListHeadOpElements();
		this.pListTailOp = new ListTailOpElements();
		this.pListConsOp = new ListConsOpElements();
		this.pListLengthOp = new ListLengthOpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.isc.ElErrorCosmicoDePaserj".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MyRacketProgram:
	//	("Definitions:"
	//	defines+=Define+)?
	//	"Executions:"
	//	executions+=Expression+;
	public MyRacketProgramElements getMyRacketProgramAccess() {
		return pMyRacketProgram;
	}
	
	public ParserRule getMyRacketProgramRule() {
		return getMyRacketProgramAccess().getRule();
	}
	
	//Define:
	//	"(" "define" "(" name=ID params+=ParamsExpression* ")" body=Expression ")";
	public DefineElements getDefineAccess() {
		return pDefine;
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}
	
	//Expression:
	//	ParamsCallExpression
	//	| SimpleExpression
	//	| ArithExpression
	//	| IfExpression
	//	| FunctionCallExpression
	//	| StringExpression
	//	| BooleanExpression
	//	| ListExpression
	//	| ListOperationExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//SimpleExpression:
	//	IntExpression;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//IntExpression:
	//	value=INT;
	public IntExpressionElements getIntExpressionAccess() {
		return pIntExpression;
	}
	
	public ParserRule getIntExpressionRule() {
		return getIntExpressionAccess().getRule();
	}
	
	//ArithExpression:
	//	"(" op=("+" | "-" | "*" | "/") args+=Expression args+=Expression+ ")";
	public ArithExpressionElements getArithExpressionAccess() {
		return pArithExpression;
	}
	
	public ParserRule getArithExpressionRule() {
		return getArithExpressionAccess().getRule();
	}
	
	//IfExpression:
	//	"(" "if" cond=BooleanExpression then=Expression sino=Expression ")";
	public IfExpressionElements getIfExpressionAccess() {
		return pIfExpression;
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}
	
	////LINKING
	//FunctionCallExpression:
	//	"(" function=[Define] args+=Expression* ")";
	public FunctionCallExpressionElements getFunctionCallExpressionAccess() {
		return pFunctionCallExpression;
	}
	
	public ParserRule getFunctionCallExpressionRule() {
		return getFunctionCallExpressionAccess().getRule();
	}
	
	//StringExpression:
	//	st=STRING;
	public StringExpressionElements getStringExpressionAccess() {
		return pStringExpression;
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}
	
	//ParamsExpression:
	//	name=ID;
	public ParamsExpressionElements getParamsExpressionAccess() {
		return pParamsExpression;
	}
	
	public ParserRule getParamsExpressionRule() {
		return getParamsExpressionAccess().getRule();
	}
	
	//ParamsCallExpression:
	//	function=[ParamsExpression];
	public ParamsCallExpressionElements getParamsCallExpressionAccess() {
		return pParamsCallExpression;
	}
	
	public ParserRule getParamsCallExpressionRule() {
		return getParamsCallExpressionAccess().getRule();
	}
	
	//BooleanExpression:
	//	BooleanConstant | BooleanOpExpression | ComparisonExpression | StringEqualsExpression
	//	| ListIsEmptyExpression
	//	//|condicion = (LeftPart= Expression relacion=opBool RightPart= Expression)
	//	// condicion ej x>2
	//	//etc (un id)
	//	//cte boolean true o false
	//;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//BooleanConstant:
	//	bool?='true' | {BooleanConstant} 'false';
	public BooleanConstantElements getBooleanConstantAccess() {
		return pBooleanConstant;
	}
	
	public ParserRule getBooleanConstantRule() {
		return getBooleanConstantAccess().getRule();
	}
	
	//BooleanOpExpression:
	//	"(" op=("AND" | "OR") args+=BooleanExpression args+=BooleanExpression+ ")";
	public BooleanOpExpressionElements getBooleanOpExpressionAccess() {
		return pBooleanOpExpression;
	}
	
	public ParserRule getBooleanOpExpressionRule() {
		return getBooleanOpExpressionAccess().getRule();
	}
	
	//ComparisonExpression:
	//	"(" evaluator=(">" | "<" | "equal" | ">=" | "<=") args+=IntExpression args+=IntExpression+ ")";
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//StringEqualsExpression:
	//	"(" op="equal?" args+=StringExpression args+=StringExpression ")";
	public StringEqualsExpressionElements getStringEqualsExpressionAccess() {
		return pStringEqualsExpression;
	}
	
	public ParserRule getStringEqualsExpressionRule() {
		return getStringEqualsExpressionAccess().getRule();
	}
	
	//ListIsEmptyExpression:
	//	"(" "empty?" list=LinkedList ")";
	public ListIsEmptyExpressionElements getListIsEmptyExpressionAccess() {
		return pListIsEmptyExpression;
	}
	
	public ParserRule getListIsEmptyExpressionRule() {
		return getListIsEmptyExpressionAccess().getRule();
	}
	
	//ListExpression:
	//	simple=SimpleList;
	public ListExpressionElements getListExpressionAccess() {
		return pListExpression;
	}
	
	public ParserRule getListExpressionRule() {
		return getListExpressionAccess().getRule();
	}
	
	//SimpleList:
	//	{SimpleList} "$(" linked=LinkedList? ")";
	public SimpleListElements getSimpleListAccess() {
		return pSimpleList;
	}
	
	public ParserRule getSimpleListRule() {
		return getSimpleListAccess().getRule();
	}
	
	//LinkedList:
	//	head=Expression tail+=Expression*;
	public LinkedListElements getLinkedListAccess() {
		return pLinkedList;
	}
	
	public ParserRule getLinkedListRule() {
		return getLinkedListAccess().getRule();
	}
	
	//ListOperationExpression:
	//	ListHeadOp | ListTailOp | ListConsOp | ListLengthOp;
	public ListOperationExpressionElements getListOperationExpressionAccess() {
		return pListOperationExpression;
	}
	
	public ParserRule getListOperationExpressionRule() {
		return getListOperationExpressionAccess().getRule();
	}
	
	//ListHeadOp:
	//	"(" "car" list=LinkedList ")";
	public ListHeadOpElements getListHeadOpAccess() {
		return pListHeadOp;
	}
	
	public ParserRule getListHeadOpRule() {
		return getListHeadOpAccess().getRule();
	}
	
	//ListTailOp:
	//	"(" "cdr" list=LinkedList ")";
	public ListTailOpElements getListTailOpAccess() {
		return pListTailOp;
	}
	
	public ParserRule getListTailOpRule() {
		return getListTailOpAccess().getRule();
	}
	
	//ListConsOp:
	//	"(" "cons" elem=Expression list=LinkedList ")";
	public ListConsOpElements getListConsOpAccess() {
		return pListConsOp;
	}
	
	public ParserRule getListConsOpRule() {
		return getListConsOpAccess().getRule();
	}
	
	//ListLengthOp:
	//	"(" "length" list=LinkedList ")";
	public ListLengthOpElements getListLengthOpAccess() {
		return pListLengthOp;
	}
	
	public ParserRule getListLengthOpRule() {
		return getListLengthOpAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
