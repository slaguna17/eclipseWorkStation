/**
 * generated by Xtext 2.21.0
 */
package edu.upb.lp.isc.elErrorCosmicoDePaserj.util;

import edu.upb.lp.isc.elErrorCosmicoDePaserj.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see edu.upb.lp.isc.elErrorCosmicoDePaserj.ElErrorCosmicoDePaserjPackage
 * @generated
 */
public class ElErrorCosmicoDePaserjSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ElErrorCosmicoDePaserjPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElErrorCosmicoDePaserjSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = ElErrorCosmicoDePaserjPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case ElErrorCosmicoDePaserjPackage.MY_RACKET_PROGRAM:
      {
        MyRacketProgram myRacketProgram = (MyRacketProgram)theEObject;
        T result = caseMyRacketProgram(myRacketProgram);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.DEFINE:
      {
        Define define = (Define)theEObject;
        T result = caseDefine(define);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.SIMPLE_EXPRESSION:
      {
        SimpleExpression simpleExpression = (SimpleExpression)theEObject;
        T result = caseSimpleExpression(simpleExpression);
        if (result == null) result = caseExpression(simpleExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.INT_EXPRESSION:
      {
        IntExpression intExpression = (IntExpression)theEObject;
        T result = caseIntExpression(intExpression);
        if (result == null) result = caseSimpleExpression(intExpression);
        if (result == null) result = caseExpression(intExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.ARITH_EXPRESSION:
      {
        ArithExpression arithExpression = (ArithExpression)theEObject;
        T result = caseArithExpression(arithExpression);
        if (result == null) result = caseExpression(arithExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.IF_EXPRESSION:
      {
        IfExpression ifExpression = (IfExpression)theEObject;
        T result = caseIfExpression(ifExpression);
        if (result == null) result = caseExpression(ifExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.FUNCTION_CALL_EXPRESSION:
      {
        FunctionCallExpression functionCallExpression = (FunctionCallExpression)theEObject;
        T result = caseFunctionCallExpression(functionCallExpression);
        if (result == null) result = caseExpression(functionCallExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.STRING_EXPRESSION:
      {
        StringExpression stringExpression = (StringExpression)theEObject;
        T result = caseStringExpression(stringExpression);
        if (result == null) result = caseExpression(stringExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.PARAMS_EXPRESSION:
      {
        ParamsExpression paramsExpression = (ParamsExpression)theEObject;
        T result = caseParamsExpression(paramsExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.PARAMS_CALL_EXPRESSION:
      {
        ParamsCallExpression paramsCallExpression = (ParamsCallExpression)theEObject;
        T result = caseParamsCallExpression(paramsCallExpression);
        if (result == null) result = caseExpression(paramsCallExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.BOOLEAN_EXPRESSION:
      {
        BooleanExpression booleanExpression = (BooleanExpression)theEObject;
        T result = caseBooleanExpression(booleanExpression);
        if (result == null) result = caseExpression(booleanExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.BOOLEAN_CONSTANT:
      {
        BooleanConstant booleanConstant = (BooleanConstant)theEObject;
        T result = caseBooleanConstant(booleanConstant);
        if (result == null) result = caseBooleanExpression(booleanConstant);
        if (result == null) result = caseExpression(booleanConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.BOOLEAN_OP_EXPRESSION:
      {
        BooleanOpExpression booleanOpExpression = (BooleanOpExpression)theEObject;
        T result = caseBooleanOpExpression(booleanOpExpression);
        if (result == null) result = caseBooleanExpression(booleanOpExpression);
        if (result == null) result = caseExpression(booleanOpExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.COMPARISON_EXPRESSION:
      {
        ComparisonExpression comparisonExpression = (ComparisonExpression)theEObject;
        T result = caseComparisonExpression(comparisonExpression);
        if (result == null) result = caseBooleanExpression(comparisonExpression);
        if (result == null) result = caseExpression(comparisonExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.STRING_EQUALS_EXPRESSION:
      {
        StringEqualsExpression stringEqualsExpression = (StringEqualsExpression)theEObject;
        T result = caseStringEqualsExpression(stringEqualsExpression);
        if (result == null) result = caseBooleanExpression(stringEqualsExpression);
        if (result == null) result = caseExpression(stringEqualsExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.LIST_IS_EMPTY_EXPRESSION:
      {
        ListIsEmptyExpression listIsEmptyExpression = (ListIsEmptyExpression)theEObject;
        T result = caseListIsEmptyExpression(listIsEmptyExpression);
        if (result == null) result = caseBooleanExpression(listIsEmptyExpression);
        if (result == null) result = caseExpression(listIsEmptyExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.LIST_EXPRESSION:
      {
        ListExpression listExpression = (ListExpression)theEObject;
        T result = caseListExpression(listExpression);
        if (result == null) result = caseExpression(listExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.SIMPLE_LIST:
      {
        SimpleList simpleList = (SimpleList)theEObject;
        T result = caseSimpleList(simpleList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.LINKED_LIST:
      {
        LinkedList linkedList = (LinkedList)theEObject;
        T result = caseLinkedList(linkedList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.LIST_OPERATION_EXPRESSION:
      {
        ListOperationExpression listOperationExpression = (ListOperationExpression)theEObject;
        T result = caseListOperationExpression(listOperationExpression);
        if (result == null) result = caseExpression(listOperationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.LIST_HEAD_OP:
      {
        ListHeadOp listHeadOp = (ListHeadOp)theEObject;
        T result = caseListHeadOp(listHeadOp);
        if (result == null) result = caseListOperationExpression(listHeadOp);
        if (result == null) result = caseExpression(listHeadOp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.LIST_TAIL_OP:
      {
        ListTailOp listTailOp = (ListTailOp)theEObject;
        T result = caseListTailOp(listTailOp);
        if (result == null) result = caseListOperationExpression(listTailOp);
        if (result == null) result = caseExpression(listTailOp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.LIST_CONS_OP:
      {
        ListConsOp listConsOp = (ListConsOp)theEObject;
        T result = caseListConsOp(listConsOp);
        if (result == null) result = caseListOperationExpression(listConsOp);
        if (result == null) result = caseExpression(listConsOp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case ElErrorCosmicoDePaserjPackage.LIST_LENGTH_OP:
      {
        ListLengthOp listLengthOp = (ListLengthOp)theEObject;
        T result = caseListLengthOp(listLengthOp);
        if (result == null) result = caseListOperationExpression(listLengthOp);
        if (result == null) result = caseExpression(listLengthOp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>My Racket Program</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>My Racket Program</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMyRacketProgram(MyRacketProgram object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Define</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Define</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefine(Define object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleExpression(SimpleExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntExpression(IntExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arith Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arith Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithExpression(ArithExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfExpression(IfExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCallExpression(FunctionCallExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringExpression(StringExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Params Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Params Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParamsExpression(ParamsExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Params Call Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Params Call Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParamsCallExpression(ParamsCallExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanExpression(BooleanExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanConstant(BooleanConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Op Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Op Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanOpExpression(BooleanOpExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparisonExpression(ComparisonExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Equals Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Equals Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringEqualsExpression(StringEqualsExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Is Empty Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Is Empty Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListIsEmptyExpression(ListIsEmptyExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListExpression(ListExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleList(SimpleList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Linked List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Linked List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLinkedList(LinkedList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Operation Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Operation Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListOperationExpression(ListOperationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Head Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Head Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListHeadOp(ListHeadOp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Tail Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Tail Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListTailOp(ListTailOp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Cons Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Cons Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListConsOp(ListConsOp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Length Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Length Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListLengthOp(ListLengthOp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //ElErrorCosmicoDePaserjSwitch
