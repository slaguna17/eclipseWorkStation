/*
 * generated by Xtext 2.21.0
 */
grammar InternalElErrorCosmicoDePaserj;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.upb.lp.isc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.upb.lp.isc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.upb.lp.isc.services.ElErrorCosmicoDePaserjGrammarAccess;

}

@parser::members {

 	private ElErrorCosmicoDePaserjGrammarAccess grammarAccess;

    public InternalElErrorCosmicoDePaserjParser(TokenStream input, ElErrorCosmicoDePaserjGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MyRacketProgram";
   	}

   	@Override
   	protected ElErrorCosmicoDePaserjGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMyRacketProgram
entryRuleMyRacketProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMyRacketProgramRule()); }
	iv_ruleMyRacketProgram=ruleMyRacketProgram
	{ $current=$iv_ruleMyRacketProgram.current; }
	EOF;

// Rule MyRacketProgram
ruleMyRacketProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Definitions:'
			{
				newLeafNode(otherlv_0, grammarAccess.getMyRacketProgramAccess().getDefinitionsKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMyRacketProgramAccess().getDefinesDefineParserRuleCall_0_1_0());
					}
					lv_defines_1_0=ruleDefine
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMyRacketProgramRule());
						}
						add(
							$current,
							"defines",
							lv_defines_1_0,
							"edu.upb.lp.isc.ElErrorCosmicoDePaserj.Define");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		otherlv_2='Executions:'
		{
			newLeafNode(otherlv_2, grammarAccess.getMyRacketProgramAccess().getExecutionsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMyRacketProgramAccess().getExecutionsExpressionParserRuleCall_2_0());
				}
				lv_executions_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMyRacketProgramRule());
					}
					add(
						$current,
						"executions",
						lv_executions_3_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleDefine
entryRuleDefine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefineRule()); }
	iv_ruleDefine=ruleDefine
	{ $current=$iv_ruleDefine.current; }
	EOF;

// Rule Define
ruleDefine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='define'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefineAccess().getDefineKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getDefineAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefineRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDefineAccess().getParamsParamsExpressionParserRuleCall_4_0());
				}
				lv_params_4_0=ruleParamsExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefineRule());
					}
					add(
						$current,
						"params",
						lv_params_4_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.ParamsExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getDefineAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefineAccess().getBodyExpressionParserRuleCall_6_0());
				}
				lv_body_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefineRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getDefineAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getParamsCallExpressionParserRuleCall_0());
		}
		this_ParamsCallExpression_0=ruleParamsCallExpression
		{
			$current = $this_ParamsCallExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_1());
		}
		this_SimpleExpression_1=ruleSimpleExpression
		{
			$current = $this_SimpleExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getArithExpressionParserRuleCall_2());
		}
		this_ArithExpression_2=ruleArithExpression
		{
			$current = $this_ArithExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getIfExpressionParserRuleCall_3());
		}
		this_IfExpression_3=ruleIfExpression
		{
			$current = $this_IfExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFunctionCallExpressionParserRuleCall_4());
		}
		this_FunctionCallExpression_4=ruleFunctionCallExpression
		{
			$current = $this_FunctionCallExpression_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_5());
		}
		this_StringExpression_5=ruleStringExpression
		{
			$current = $this_StringExpression_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_6());
		}
		this_BooleanExpression_6=ruleBooleanExpression
		{
			$current = $this_BooleanExpression_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getListExpressionParserRuleCall_7());
		}
		this_ListExpression_7=ruleListExpression
		{
			$current = $this_ListExpression_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getListOperationExpressionParserRuleCall_8());
		}
		this_ListOperationExpression_8=ruleListOperationExpression
		{
			$current = $this_ListOperationExpression_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	iv_ruleSimpleExpression=ruleSimpleExpression
	{ $current=$iv_ruleSimpleExpression.current; }
	EOF;

// Rule SimpleExpression
ruleSimpleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSimpleExpressionAccess().getIntExpressionParserRuleCall());
	}
	this_IntExpression_0=ruleIntExpression
	{
		$current = $this_IntExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleIntExpression
entryRuleIntExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntExpressionRule()); }
	iv_ruleIntExpression=ruleIntExpression
	{ $current=$iv_ruleIntExpression.current; }
	EOF;

// Rule IntExpression
ruleIntExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntExpressionAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleArithExpression
entryRuleArithExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithExpressionRule()); }
	iv_ruleArithExpression=ruleArithExpression
	{ $current=$iv_ruleArithExpression.current; }
	EOF;

// Rule ArithExpression
ruleArithExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getArithExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					lv_op_1_1='+'
					{
						newLeafNode(lv_op_1_1, grammarAccess.getArithExpressionAccess().getOpPlusSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_1, null);
					}
					    |
					lv_op_1_2='-'
					{
						newLeafNode(lv_op_1_2, grammarAccess.getArithExpressionAccess().getOpHyphenMinusKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_2, null);
					}
					    |
					lv_op_1_3='*'
					{
						newLeafNode(lv_op_1_3, grammarAccess.getArithExpressionAccess().getOpAsteriskKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_3, null);
					}
					    |
					lv_op_1_4='/'
					{
						newLeafNode(lv_op_1_4, grammarAccess.getArithExpressionAccess().getOpSolidusKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_4, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArithExpressionAccess().getArgsExpressionParserRuleCall_2_0());
				}
				lv_args_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArithExpressionAccess().getArgsExpressionParserRuleCall_3_0());
				}
				lv_args_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_3_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getArithExpressionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	iv_ruleIfExpression=ruleIfExpression
	{ $current=$iv_ruleIfExpression.current; }
	EOF;

// Rule IfExpression
ruleIfExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfExpressionAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getCondBooleanExpressionParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_3_0());
				}
				lv_then_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"then",
						lv_then_3_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getSinoExpressionParserRuleCall_4_0());
				}
				lv_sino_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"sino",
						lv_sino_4_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleFunctionCallExpression
entryRuleFunctionCallExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallExpressionRule()); }
	iv_ruleFunctionCallExpression=ruleFunctionCallExpression
	{ $current=$iv_ruleFunctionCallExpression.current; }
	EOF;

// Rule FunctionCallExpression
ruleFunctionCallExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionCallExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFunctionCallExpressionAccess().getFunctionDefineCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionCallExpressionAccess().getArgsExpressionParserRuleCall_2_0());
				}
				lv_args_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionCallExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionCallExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringExpressionRule()); }
	iv_ruleStringExpression=ruleStringExpression
	{ $current=$iv_ruleStringExpression.current; }
	EOF;

// Rule StringExpression
ruleStringExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_st_0_0=RULE_STRING
			{
				newLeafNode(lv_st_0_0, grammarAccess.getStringExpressionAccess().getStSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"st",
					lv_st_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleParamsExpression
entryRuleParamsExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamsExpressionRule()); }
	iv_ruleParamsExpression=ruleParamsExpression
	{ $current=$iv_ruleParamsExpression.current; }
	EOF;

// Rule ParamsExpression
ruleParamsExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getParamsExpressionAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParamsExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleParamsCallExpression
entryRuleParamsCallExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamsCallExpressionRule()); }
	iv_ruleParamsCallExpression=ruleParamsCallExpression
	{ $current=$iv_ruleParamsCallExpression.current; }
	EOF;

// Rule ParamsCallExpression
ruleParamsCallExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParamsCallExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getParamsCallExpressionAccess().getFunctionParamsExpressionCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanConstantParserRuleCall_0());
		}
		this_BooleanConstant_0=ruleBooleanConstant
		{
			$current = $this_BooleanConstant_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanOpExpressionParserRuleCall_1());
		}
		this_BooleanOpExpression_1=ruleBooleanOpExpression
		{
			$current = $this_BooleanOpExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getComparisonExpressionParserRuleCall_2());
		}
		this_ComparisonExpression_2=ruleComparisonExpression
		{
			$current = $this_ComparisonExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getStringEqualsExpressionParserRuleCall_3());
		}
		this_StringEqualsExpression_3=ruleStringEqualsExpression
		{
			$current = $this_StringEqualsExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getListIsEmptyExpressionParserRuleCall_4());
		}
		this_ListIsEmptyExpression_4=ruleListIsEmptyExpression
		{
			$current = $this_ListIsEmptyExpression_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanConstant
entryRuleBooleanConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanConstantRule()); }
	iv_ruleBooleanConstant=ruleBooleanConstant
	{ $current=$iv_ruleBooleanConstant.current; }
	EOF;

// Rule BooleanConstant
ruleBooleanConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_bool_0_0='true'
				{
					newLeafNode(lv_bool_0_0, grammarAccess.getBooleanConstantAccess().getBoolTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanConstantRule());
					}
					setWithLastConsumed($current, "bool", true, "true");
				}
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBooleanConstantAccess().getBooleanConstantAction_1_0(),
						$current);
				}
			)
			otherlv_2='false'
			{
				newLeafNode(otherlv_2, grammarAccess.getBooleanConstantAccess().getFalseKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleBooleanOpExpression
entryRuleBooleanOpExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanOpExpressionRule()); }
	iv_ruleBooleanOpExpression=ruleBooleanOpExpression
	{ $current=$iv_ruleBooleanOpExpression.current; }
	EOF;

// Rule BooleanOpExpression
ruleBooleanOpExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getBooleanOpExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					lv_op_1_1='AND'
					{
						newLeafNode(lv_op_1_1, grammarAccess.getBooleanOpExpressionAccess().getOpANDKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBooleanOpExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_1, null);
					}
					    |
					lv_op_1_2='OR'
					{
						newLeafNode(lv_op_1_2, grammarAccess.getBooleanOpExpressionAccess().getOpORKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBooleanOpExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanOpExpressionAccess().getArgsBooleanExpressionParserRuleCall_2_0());
				}
				lv_args_2_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanOpExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanOpExpressionAccess().getArgsBooleanExpressionParserRuleCall_3_0());
				}
				lv_args_3_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanOpExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_3_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getBooleanOpExpressionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getComparisonExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					lv_evaluator_1_1='>'
					{
						newLeafNode(lv_evaluator_1_1, grammarAccess.getComparisonExpressionAccess().getEvaluatorGreaterThanSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComparisonExpressionRule());
						}
						setWithLastConsumed($current, "evaluator", lv_evaluator_1_1, null);
					}
					    |
					lv_evaluator_1_2='<'
					{
						newLeafNode(lv_evaluator_1_2, grammarAccess.getComparisonExpressionAccess().getEvaluatorLessThanSignKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComparisonExpressionRule());
						}
						setWithLastConsumed($current, "evaluator", lv_evaluator_1_2, null);
					}
					    |
					lv_evaluator_1_3='equal'
					{
						newLeafNode(lv_evaluator_1_3, grammarAccess.getComparisonExpressionAccess().getEvaluatorEqualKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComparisonExpressionRule());
						}
						setWithLastConsumed($current, "evaluator", lv_evaluator_1_3, null);
					}
					    |
					lv_evaluator_1_4='>='
					{
						newLeafNode(lv_evaluator_1_4, grammarAccess.getComparisonExpressionAccess().getEvaluatorGreaterThanSignEqualsSignKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComparisonExpressionRule());
						}
						setWithLastConsumed($current, "evaluator", lv_evaluator_1_4, null);
					}
					    |
					lv_evaluator_1_5='<='
					{
						newLeafNode(lv_evaluator_1_5, grammarAccess.getComparisonExpressionAccess().getEvaluatorLessThanSignEqualsSignKeyword_1_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComparisonExpressionRule());
						}
						setWithLastConsumed($current, "evaluator", lv_evaluator_1_5, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpressionAccess().getArgsIntExpressionParserRuleCall_2_0());
				}
				lv_args_2_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonExpressionAccess().getArgsIntExpressionParserRuleCall_3_0());
				}
				lv_args_3_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_3_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getComparisonExpressionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleStringEqualsExpression
entryRuleStringEqualsExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringEqualsExpressionRule()); }
	iv_ruleStringEqualsExpression=ruleStringEqualsExpression
	{ $current=$iv_ruleStringEqualsExpression.current; }
	EOF;

// Rule StringEqualsExpression
ruleStringEqualsExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getStringEqualsExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_op_1_0='equal?'
				{
					newLeafNode(lv_op_1_0, grammarAccess.getStringEqualsExpressionAccess().getOpEqualKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringEqualsExpressionRule());
					}
					setWithLastConsumed($current, "op", lv_op_1_0, "equal?");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStringEqualsExpressionAccess().getArgsStringExpressionParserRuleCall_2_0());
				}
				lv_args_2_0=ruleStringExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringEqualsExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.StringExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStringEqualsExpressionAccess().getArgsStringExpressionParserRuleCall_3_0());
				}
				lv_args_3_0=ruleStringExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringEqualsExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_3_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.StringExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getStringEqualsExpressionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleListIsEmptyExpression
entryRuleListIsEmptyExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListIsEmptyExpressionRule()); }
	iv_ruleListIsEmptyExpression=ruleListIsEmptyExpression
	{ $current=$iv_ruleListIsEmptyExpression.current; }
	EOF;

// Rule ListIsEmptyExpression
ruleListIsEmptyExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getListIsEmptyExpressionAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='empty?'
		{
			newLeafNode(otherlv_1, grammarAccess.getListIsEmptyExpressionAccess().getEmptyKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListIsEmptyExpressionAccess().getListLinkedListParserRuleCall_2_0());
				}
				lv_list_2_0=ruleLinkedList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListIsEmptyExpressionRule());
					}
					set(
						$current,
						"list",
						lv_list_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.LinkedList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getListIsEmptyExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleListExpression
entryRuleListExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListExpressionRule()); }
	iv_ruleListExpression=ruleListExpression
	{ $current=$iv_ruleListExpression.current; }
	EOF;

// Rule ListExpression
ruleListExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getListExpressionAccess().getSimpleSimpleListParserRuleCall_0());
			}
			lv_simple_0_0=ruleSimpleList
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getListExpressionRule());
				}
				set(
					$current,
					"simple",
					lv_simple_0_0,
					"edu.upb.lp.isc.ElErrorCosmicoDePaserj.SimpleList");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSimpleList
entryRuleSimpleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleListRule()); }
	iv_ruleSimpleList=ruleSimpleList
	{ $current=$iv_ruleSimpleList.current; }
	EOF;

// Rule SimpleList
ruleSimpleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSimpleListAccess().getSimpleListAction_0(),
					$current);
			}
		)
		otherlv_1='$('
		{
			newLeafNode(otherlv_1, grammarAccess.getSimpleListAccess().getDollarSignLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleListAccess().getLinkedLinkedListParserRuleCall_2_0());
				}
				lv_linked_2_0=ruleLinkedList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleListRule());
					}
					set(
						$current,
						"linked",
						lv_linked_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.LinkedList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSimpleListAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLinkedList
entryRuleLinkedList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLinkedListRule()); }
	iv_ruleLinkedList=ruleLinkedList
	{ $current=$iv_ruleLinkedList.current; }
	EOF;

// Rule LinkedList
ruleLinkedList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLinkedListAccess().getHeadExpressionParserRuleCall_0_0());
				}
				lv_head_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLinkedListRule());
					}
					set(
						$current,
						"head",
						lv_head_0_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLinkedListAccess().getTailExpressionParserRuleCall_1_0());
				}
				lv_tail_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLinkedListRule());
					}
					add(
						$current,
						"tail",
						lv_tail_1_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleListOperationExpression
entryRuleListOperationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListOperationExpressionRule()); }
	iv_ruleListOperationExpression=ruleListOperationExpression
	{ $current=$iv_ruleListOperationExpression.current; }
	EOF;

// Rule ListOperationExpression
ruleListOperationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getListOperationExpressionAccess().getListHeadOpParserRuleCall_0());
		}
		this_ListHeadOp_0=ruleListHeadOp
		{
			$current = $this_ListHeadOp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getListOperationExpressionAccess().getListTailOpParserRuleCall_1());
		}
		this_ListTailOp_1=ruleListTailOp
		{
			$current = $this_ListTailOp_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getListOperationExpressionAccess().getListConsOpParserRuleCall_2());
		}
		this_ListConsOp_2=ruleListConsOp
		{
			$current = $this_ListConsOp_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getListOperationExpressionAccess().getListLengthOpParserRuleCall_3());
		}
		this_ListLengthOp_3=ruleListLengthOp
		{
			$current = $this_ListLengthOp_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleListHeadOp
entryRuleListHeadOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListHeadOpRule()); }
	iv_ruleListHeadOp=ruleListHeadOp
	{ $current=$iv_ruleListHeadOp.current; }
	EOF;

// Rule ListHeadOp
ruleListHeadOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getListHeadOpAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='car'
		{
			newLeafNode(otherlv_1, grammarAccess.getListHeadOpAccess().getCarKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListHeadOpAccess().getListLinkedListParserRuleCall_2_0());
				}
				lv_list_2_0=ruleLinkedList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListHeadOpRule());
					}
					set(
						$current,
						"list",
						lv_list_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.LinkedList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getListHeadOpAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleListTailOp
entryRuleListTailOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListTailOpRule()); }
	iv_ruleListTailOp=ruleListTailOp
	{ $current=$iv_ruleListTailOp.current; }
	EOF;

// Rule ListTailOp
ruleListTailOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getListTailOpAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='cdr'
		{
			newLeafNode(otherlv_1, grammarAccess.getListTailOpAccess().getCdrKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListTailOpAccess().getListLinkedListParserRuleCall_2_0());
				}
				lv_list_2_0=ruleLinkedList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListTailOpRule());
					}
					set(
						$current,
						"list",
						lv_list_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.LinkedList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getListTailOpAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleListConsOp
entryRuleListConsOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListConsOpRule()); }
	iv_ruleListConsOp=ruleListConsOp
	{ $current=$iv_ruleListConsOp.current; }
	EOF;

// Rule ListConsOp
ruleListConsOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getListConsOpAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='cons'
		{
			newLeafNode(otherlv_1, grammarAccess.getListConsOpAccess().getConsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListConsOpAccess().getElemExpressionParserRuleCall_2_0());
				}
				lv_elem_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListConsOpRule());
					}
					set(
						$current,
						"elem",
						lv_elem_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getListConsOpAccess().getListLinkedListParserRuleCall_3_0());
				}
				lv_list_3_0=ruleLinkedList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListConsOpRule());
					}
					set(
						$current,
						"list",
						lv_list_3_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.LinkedList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getListConsOpAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleListLengthOp
entryRuleListLengthOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListLengthOpRule()); }
	iv_ruleListLengthOp=ruleListLengthOp
	{ $current=$iv_ruleListLengthOp.current; }
	EOF;

// Rule ListLengthOp
ruleListLengthOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getListLengthOpAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='length'
		{
			newLeafNode(otherlv_1, grammarAccess.getListLengthOpAccess().getLengthKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListLengthOpAccess().getListLinkedListParserRuleCall_2_0());
				}
				lv_list_2_0=ruleLinkedList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListLengthOpRule());
					}
					set(
						$current,
						"list",
						lv_list_2_0,
						"edu.upb.lp.isc.ElErrorCosmicoDePaserj.LinkedList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getListLengthOpAccess().getRightParenthesisKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
