/**
 * * generated by Xtext 2.22.0.M2
 */
package edu.upb.lp.isc.generator;

import edu.upb.lp.isc.elErrorCosmicoDePaserj.ArithExpression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.BooleanConstant;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.BooleanExpression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.BooleanOpExpression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.ComparisonExpression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.Define;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.Expression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.FunctionCallExpression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.IfExpression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.IntExpression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.LinkedList;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.ListConsOp;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.ListExpression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.ListHeadOp;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.ListLengthOp;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.ListOperationExpression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.ListTailOp;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.MyRacketProgram;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.ParamsExpression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.StringEqualsExpression;
import edu.upb.lp.isc.elErrorCosmicoDePaserj.StringExpression;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ElErrorCosmicoDePaserjGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final MyRacketProgram p = ((MyRacketProgram) _get);
    fsa.generateFile("Main.java", this.generate(p));
  }
  
  public CharSequence generate(final MyRacketProgram p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("import java.io.*; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import java.util.LinkedList; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class Main {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static List getTail (List l){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("l.removeFirst();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return l;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Define> _defines = p.getDefines();
      for(final Define d : _defines) {
        _builder.append("\t\t");
        CharSequence _generateDefine = this.generateDefine(d);
        _builder.append(_generateDefine, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Expression> _executions = p.getExecutions();
      for(final Expression e : _executions) {
        _builder.append("\t\t");
        {
          if ((e instanceof FunctionCallExpression)) {
            CharSequence _generateFunctionCall = this.generateFunctionCall(((FunctionCallExpression)e));
            _builder.append(_generateFunctionCall, "\t\t");
            _builder.append(" ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
          } else {
            if ((e instanceof ListExpression)) {
              CharSequence _generateExpression = this.generateExpression(e);
              _builder.append(_generateExpression, "\t\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
            } else {
              if ((e instanceof IfExpression)) {
                CharSequence _generateIf = this.generateIf(((IfExpression)e));
                _builder.append(_generateIf, "\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
              } else {
                _builder.append("System.out.println(");
                CharSequence _generateExpression_1 = this.generateExpression(e);
                _builder.append(_generateExpression_1, "\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence generateExpression(final Expression e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof ArithExpression)) {
        CharSequence _generateArith = this.generateArith(((ArithExpression) e));
        _builder.append(_generateArith);
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof IntExpression)) {
          CharSequence _generateInt = this.generateInt(((IntExpression) e));
          _builder.append(_generateInt);
          _builder.newLineIfNotEmpty();
        } else {
          if ((e instanceof StringExpression)) {
            CharSequence _generateString = this.generateString(((StringExpression) e));
            _builder.append(_generateString);
            _builder.newLineIfNotEmpty();
          } else {
            if ((e instanceof BooleanExpression)) {
              CharSequence _generateBoolean = this.generateBoolean(((BooleanExpression) e));
              _builder.append(_generateBoolean);
              _builder.newLineIfNotEmpty();
              _builder.newLine();
            } else {
              if ((e instanceof ListExpression)) {
                CharSequence _generateList = this.generateList(((ListExpression) e));
                _builder.append(_generateList);
                _builder.newLineIfNotEmpty();
                _builder.newLine();
              } else {
                if ((e instanceof IfExpression)) {
                  CharSequence _generateIf = this.generateIf(((IfExpression) e));
                  _builder.append(_generateIf);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateDefine(final Define d) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _body = d.getBody();
      if ((_body instanceof IntExpression)) {
        _builder.newLineIfNotEmpty();
        _builder.append("int ");
        String _name = d.getName();
        _builder.append(_name);
        _builder.append(" = ");
        CharSequence _generateExpression = this.generateExpression(d.getBody());
        _builder.append(_generateExpression);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      } else {
        Expression _body_1 = d.getBody();
        if ((_body_1 instanceof StringExpression)) {
          _builder.append("String ");
          String _name_1 = d.getName();
          _builder.append(_name_1);
          _builder.append(" = ");
          CharSequence _generateExpression_1 = this.generateExpression(d.getBody());
          _builder.append(_generateExpression_1);
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        } else {
          Expression _body_2 = d.getBody();
          if ((_body_2 instanceof BooleanExpression)) {
            _builder.append("boolean ");
            String _name_2 = d.getName();
            _builder.append(_name_2);
            _builder.append(" = ");
            CharSequence _generateExpression_2 = this.generateExpression(d.getBody());
            _builder.append(_generateExpression_2);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          } else {
            Expression _body_3 = d.getBody();
            if ((_body_3 instanceof ListExpression)) {
              _builder.append("List ");
              String _name_3 = d.getName();
              _builder.append(_name_3);
              _builder.append(" = new LinkedList ");
              CharSequence _generateExpression_3 = this.generateExpression(d.getBody());
              _builder.append(_generateExpression_3);
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            } else {
              Expression _body_4 = d.getBody();
              if ((_body_4 instanceof ArithExpression)) {
                _builder.append("int ");
                String _name_4 = d.getName();
                _builder.append(_name_4);
                _builder.append(" = ");
                CharSequence _generateExpression_4 = this.generateExpression(d.getBody());
                _builder.append(_generateExpression_4);
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              } else {
                Expression _body_5 = d.getBody();
                if ((_body_5 instanceof ListOperationExpression)) {
                  {
                    Expression _body_6 = d.getBody();
                    if ((_body_6 instanceof ListTailOp)) {
                      String _name_5 = d.getName();
                      _builder.append(_name_5);
                      _builder.append(".getTail(");
                      String _name_6 = d.getName();
                      _builder.append(_name_6);
                      _builder.append(")");
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _name_7 = d.getName();
                      _builder.append(_name_7);
                      Expression _body_7 = d.getBody();
                      CharSequence _generateListOperation = this.generateListOperation(((ListOperationExpression) _body_7));
                      _builder.append(_generateListOperation);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  _builder.append(";");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("public static void ");
                  String _name_8 = d.getName();
                  _builder.append(_name_8);
                  _builder.append(" (");
                  {
                    EList<ParamsExpression> _params = d.getParams();
                    for(final ParamsExpression p : _params) {
                      _builder.append(" ");
                      CharSequence _generateParams = this.generateParams(p);
                      _builder.append(_generateParams);
                      _builder.append(", ");
                    }
                  }
                  _builder.append("){");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  CharSequence _generateExpression_5 = this.generateExpression(d.getBody());
                  _builder.append(_generateExpression_5, "\t");
                  _builder.append("}");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateListOperation(final ListOperationExpression l) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((l instanceof ListHeadOp)) {
        _builder.newLineIfNotEmpty();
        _builder.append(".getFirst()\t");
        _builder.newLine();
      } else {
        if ((l instanceof ListConsOp)) {
          _builder.append(".addFirst(");
          CharSequence _generateExpression = this.generateExpression(((ListConsOp)l).getElem());
          _builder.append(_generateExpression);
          _builder.append(")");
          _builder.newLineIfNotEmpty();
        } else {
          if ((l instanceof ListLengthOp)) {
            _builder.append(".Size()");
            _builder.newLine();
            _builder.append("\t\t\t");
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateParams(final ParamsExpression p) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = p.getName();
    _builder.append(_name);
    return _builder;
  }
  
  public CharSequence generateFunctionCall(final FunctionCallExpression e) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = e.getFunction().getName();
    _builder.append(_name);
    _builder.append("(");
    final Function1<Expression, CharSequence> _function = (Expression it) -> {
      return this.generateExpression(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<Expression, CharSequence>map(e.getArgs(), _function), ", ");
    _builder.append(_join);
    _builder.append(")");
    return _builder;
  }
  
  public CharSequence generateString(final StringExpression e) {
    StringConcatenation _builder = new StringConcatenation();
    String _st = e.getSt();
    _builder.append(_st);
    return _builder;
  }
  
  public CharSequence generateInt(final IntExpression e) {
    StringConcatenation _builder = new StringConcatenation();
    int _value = e.getValue();
    _builder.append(_value);
    return _builder;
  }
  
  public CharSequence generateArith(final ArithExpression e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _equals = e.getOp().equals("+");
      if (_equals) {
        final Function1<Expression, Object> _function = (Expression it) -> {
          return this.generateExpression(it);
        };
        String _join = IterableExtensions.join(ListExtensions.<Expression, Object>map(e.getArgs(), _function), " + ");
        _builder.append(_join);
        _builder.newLineIfNotEmpty();
        _builder.append("\t ");
      } else {
        boolean _equals_1 = e.getOp().equals("-");
        if (_equals_1) {
          final Function1<Expression, Object> _function_1 = (Expression it) -> {
            return this.generateExpression(it);
          };
          String _join_1 = IterableExtensions.join(ListExtensions.<Expression, Object>map(e.getArgs(), _function_1), " - ");
          _builder.append(_join_1);
          _builder.newLineIfNotEmpty();
          _builder.append("\t ");
        } else {
          boolean _equals_2 = e.getOp().equals("*");
          if (_equals_2) {
            final Function1<Expression, Object> _function_2 = (Expression it) -> {
              return this.generateExpression(it);
            };
            String _join_2 = IterableExtensions.join(ListExtensions.<Expression, Object>map(e.getArgs(), _function_2), " * ");
            _builder.append(_join_2);
            _builder.newLineIfNotEmpty();
            _builder.append("\t ");
          } else {
            boolean _equals_3 = e.getOp().equals("/");
            if (_equals_3) {
              final Function1<Expression, Object> _function_3 = (Expression it) -> {
                return this.generateExpression(it);
              };
              String _join_3 = IterableExtensions.join(ListExtensions.<Expression, Object>map(e.getArgs(), _function_3), " / ");
              _builder.append(_join_3);
              _builder.newLineIfNotEmpty();
              _builder.append("\t ");
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateBoolean(final BooleanExpression e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof BooleanConstant)) {
        boolean _isBool = ((BooleanConstant)e).isBool();
        _builder.append(_isBool);
        _builder.newLineIfNotEmpty();
      } else {
        if ((e instanceof BooleanOpExpression)) {
          {
            boolean _equals = ((BooleanOpExpression)e).getOp().equals("OR");
            if (_equals) {
              final Function1<BooleanExpression, Object> _function = (BooleanExpression it) -> {
                return this.generateExpression(it);
              };
              String _join = IterableExtensions.join(ListExtensions.<BooleanExpression, Object>map(((BooleanOpExpression)e).getArgs(), _function), " || ");
              _builder.append(_join);
              _builder.newLineIfNotEmpty();
            } else {
              boolean _equals_1 = ((BooleanOpExpression)e).getOp().equals("AND");
              if (_equals_1) {
                final Function1<BooleanExpression, Object> _function_1 = (BooleanExpression it) -> {
                  return this.generateExpression(it);
                };
                String _join_1 = IterableExtensions.join(ListExtensions.<BooleanExpression, Object>map(((BooleanOpExpression)e).getArgs(), _function_1), " && ");
                _builder.append(_join_1);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        } else {
          if ((e instanceof ComparisonExpression)) {
            {
              boolean _equals_2 = ((ComparisonExpression)e).getEvaluator().equals(">");
              if (_equals_2) {
                final Function1<IntExpression, Object> _function_2 = (IntExpression it) -> {
                  return this.generateExpression(it);
                };
                String _join_2 = IterableExtensions.join(ListExtensions.<IntExpression, Object>map(((ComparisonExpression)e).getArgs(), _function_2), " > ");
                _builder.append(_join_2);
                _builder.newLineIfNotEmpty();
              } else {
                boolean _equals_3 = ((ComparisonExpression)e).getEvaluator().equals("<");
                if (_equals_3) {
                  final Function1<IntExpression, Object> _function_3 = (IntExpression it) -> {
                    return this.generateExpression(it);
                  };
                  String _join_3 = IterableExtensions.join(ListExtensions.<IntExpression, Object>map(((ComparisonExpression)e).getArgs(), _function_3), " < ");
                  _builder.append(_join_3);
                  _builder.newLineIfNotEmpty();
                } else {
                  boolean _equals_4 = ((ComparisonExpression)e).getEvaluator().equals("equal");
                  if (_equals_4) {
                    final Function1<IntExpression, Object> _function_4 = (IntExpression it) -> {
                      return this.generateExpression(it);
                    };
                    String _join_4 = IterableExtensions.join(ListExtensions.<IntExpression, Object>map(((ComparisonExpression)e).getArgs(), _function_4), " == ");
                    _builder.append(_join_4);
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _equals_5 = ((ComparisonExpression)e).getEvaluator().equals("<=");
                    if (_equals_5) {
                      final Function1<IntExpression, Object> _function_5 = (IntExpression it) -> {
                        return this.generateExpression(it);
                      };
                      String _join_5 = IterableExtensions.join(ListExtensions.<IntExpression, Object>map(((ComparisonExpression)e).getArgs(), _function_5), " <= ");
                      _builder.append(_join_5);
                      _builder.newLineIfNotEmpty();
                    } else {
                      boolean _equals_6 = ((ComparisonExpression)e).getEvaluator().equals(">=");
                      if (_equals_6) {
                        final Function1<IntExpression, Object> _function_6 = (IntExpression it) -> {
                          return this.generateExpression(it);
                        };
                        String _join_6 = IterableExtensions.join(ListExtensions.<IntExpression, Object>map(((ComparisonExpression)e).getArgs(), _function_6), " >= ");
                        _builder.append(_join_6);
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          } else {
            if ((e instanceof StringEqualsExpression)) {
              final Function1<StringExpression, Object> _function_7 = (StringExpression it) -> {
                return this.generateExpression(it);
              };
              String _join_7 = IterableExtensions.join(ListExtensions.<StringExpression, Object>map(((StringEqualsExpression)e).getArgs(), _function_7), ".equals(");
              _builder.append(_join_7);
              _builder.append(" ) ");
              _builder.newLineIfNotEmpty();
              _builder.append("\t \t");
            }
          }
        }
      }
    }
    _builder.append(" ");
    return _builder;
  }
  
  public CharSequence generateIf(final IfExpression e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if(");
    CharSequence _generateBoolean = this.generateBoolean(e.getCond());
    _builder.append(_generateBoolean);
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t \t\t");
    Object _generateExpression = this.generateExpression(e.getThen());
    _builder.append(_generateExpression, "\t \t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t \t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t \t\t");
    Object _generateExpression_1 = this.generateExpression(e.getSino());
    _builder.append(_generateExpression_1, "\t \t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t \t");
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence generateList(final ListExpression l) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("List l = new LinkedList(");
    LinkedList _linked = l.getSimple().getLinked();
    CharSequence _generateLinkedList = this.generateLinkedList(((java.util.LinkedList) _linked));
    _builder.append(_generateLinkedList);
    _builder.append(" ");
    return _builder;
  }
  
  public CharSequence generateLinkedList(final java.util.LinkedList l) {
    StringConcatenation _builder = new StringConcatenation();
    Object _generateExpression = this.generateExpression(IterableExtensions.<Expression>head(l));
    _builder.append(_generateExpression);
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t \t");
    {
      Iterable<Expression> _tail = IterableExtensions.<Expression>tail(l);
      for(final Expression t : _tail) {
        Object _generateExpression_1 = this.generateExpression(t);
        _builder.append(_generateExpression_1, "\t \t");
      }
    }
    return _builder;
  }
}
