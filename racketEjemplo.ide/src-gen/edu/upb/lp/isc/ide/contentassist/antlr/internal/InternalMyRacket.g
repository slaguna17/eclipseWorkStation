/*
 * generated by Xtext 2.21.0
 */
grammar InternalMyRacket;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package edu.upb.lp.isc.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.upb.lp.isc.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import edu.upb.lp.isc.services.MyRacketGrammarAccess;

}
@parser::members {
	private MyRacketGrammarAccess grammarAccess;

	public void setGrammarAccess(MyRacketGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMyRacketProgram
entryRuleMyRacketProgram
:
{ before(grammarAccess.getMyRacketProgramRule()); }
	 ruleMyRacketProgram
{ after(grammarAccess.getMyRacketProgramRule()); } 
	 EOF 
;

// Rule MyRacketProgram
ruleMyRacketProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getGroup()); }
		(rule__MyRacketProgram__Group__0)
		{ after(grammarAccess.getMyRacketProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefine
entryRuleDefine
:
{ before(grammarAccess.getDefineRule()); }
	 ruleDefine
{ after(grammarAccess.getDefineRule()); } 
	 EOF 
;

// Rule Define
ruleDefine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefineAccess().getGroup()); }
		(rule__Define__Group__0)
		{ after(grammarAccess.getDefineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getTODOKeyword()); }
		'TODO'
		{ after(grammarAccess.getExpressionAccess().getTODOKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group__0__Impl
	rule__MyRacketProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyRacketProgramAccess().getGroup_0()); }
	(rule__MyRacketProgram__Group_0__0)?
	{ after(grammarAccess.getMyRacketProgramAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group__1__Impl
	rule__MyRacketProgram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsKeyword_1()); }
	'Executions'
	{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_2()); }
		(rule__MyRacketProgram__ExecutionsAssignment_2)
		{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_2()); }
		(rule__MyRacketProgram__ExecutionsAssignment_2)*
		{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MyRacketProgram__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group_0__0__Impl
	rule__MyRacketProgram__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMyRacketProgramAccess().getDefinitionsKeyword_0_0()); }
	'Definitions'
	{ after(grammarAccess.getMyRacketProgramAccess().getDefinitionsKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MyRacketProgram__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_1()); }
		(rule__MyRacketProgram__DefinesAssignment_0_1)
		{ after(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_1()); }
	)
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_1()); }
		(rule__MyRacketProgram__DefinesAssignment_0_1)*
		{ after(grammarAccess.getMyRacketProgramAccess().getDefinesAssignment_0_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Define__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__0__Impl
	rule__Define__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__1__Impl
	rule__Define__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getDefineKeyword_1()); }
	'define'
	{ after(grammarAccess.getDefineAccess().getDefineKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__2__Impl
	rule__Define__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__3__Impl
	rule__Define__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getNameAssignment_3()); }
	(rule__Define__NameAssignment_3)
	{ after(grammarAccess.getDefineAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__4__Impl
	rule__Define__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getParamsAssignment_4()); }
	(rule__Define__ParamsAssignment_4)*
	{ after(grammarAccess.getDefineAccess().getParamsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__5__Impl
	rule__Define__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getDefineAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__6__Impl
	rule__Define__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getBodyAssignment_6()); }
	(rule__Define__BodyAssignment_6)
	{ after(grammarAccess.getDefineAccess().getBodyAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getDefineAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MyRacketProgram__DefinesAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getDefinesDefineParserRuleCall_0_1_0()); }
		ruleDefine
		{ after(grammarAccess.getMyRacketProgramAccess().getDefinesDefineParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MyRacketProgram__ExecutionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMyRacketProgramAccess().getExecutionsExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getMyRacketProgramAccess().getExecutionsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__ParamsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineAccess().getParamsIDTerminalRuleCall_4_0()); }
		RULE_ID
		{ after(grammarAccess.getDefineAccess().getParamsIDTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__BodyAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefineAccess().getBodyExpressionParserRuleCall_6_0()); }
		ruleExpression
		{ after(grammarAccess.getDefineAccess().getBodyExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
