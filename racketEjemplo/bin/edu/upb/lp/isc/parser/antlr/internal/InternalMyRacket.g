/*
 * generated by Xtext 2.21.0
 */
grammar InternalMyRacket;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.upb.lp.isc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.upb.lp.isc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.upb.lp.isc.services.MyRacketGrammarAccess;

}

@parser::members {

 	private MyRacketGrammarAccess grammarAccess;

    public InternalMyRacketParser(TokenStream input, MyRacketGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MyRacketProgram";
   	}

   	@Override
   	protected MyRacketGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMyRacketProgram
entryRuleMyRacketProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMyRacketProgramRule()); }
	iv_ruleMyRacketProgram=ruleMyRacketProgram
	{ $current=$iv_ruleMyRacketProgram.current; }
	EOF;

// Rule MyRacketProgram
ruleMyRacketProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Definitions'
			{
				newLeafNode(otherlv_0, grammarAccess.getMyRacketProgramAccess().getDefinitionsKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMyRacketProgramAccess().getDefinesDefineParserRuleCall_0_1_0());
					}
					lv_defines_1_0=ruleDefine
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMyRacketProgramRule());
						}
						add(
							$current,
							"defines",
							lv_defines_1_0,
							"edu.upb.lp.isc.MyRacket.Define");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		otherlv_2='Executions'
		{
			newLeafNode(otherlv_2, grammarAccess.getMyRacketProgramAccess().getExecutionsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMyRacketProgramAccess().getExecutionsExpressionParserRuleCall_2_0());
				}
				lv_executions_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMyRacketProgramRule());
					}
					add(
						$current,
						"executions",
						lv_executions_3_0,
						"edu.upb.lp.isc.MyRacket.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleDefine
entryRuleDefine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefineRule()); }
	iv_ruleDefine=ruleDefine
	{ $current=$iv_ruleDefine.current; }
	EOF;

// Rule Define
ruleDefine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='define'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefineAccess().getDefineKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getDefineAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefineRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_params_4_0=RULE_ID
				{
					newLeafNode(lv_params_4_0, grammarAccess.getDefineAccess().getParamsIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefineRule());
					}
					addWithLastConsumed(
						$current,
						"params",
						lv_params_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getDefineAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefineAccess().getBodyExpressionParserRuleCall_6_0());
				}
				lv_body_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefineRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"edu.upb.lp.isc.MyRacket.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getDefineAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current.getText(); }
	EOF;

// Rule Expression
ruleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='TODO'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getExpressionAccess().getTODOKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
